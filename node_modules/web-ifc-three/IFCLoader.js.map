{"version":3,"file":"IFCLoader.js","sources":["../src/IFC/components/IFCModel.ts","../src/IFC/components/IFCParser.ts","../src/IFC/components/subsets/ItemsMap.ts","../src/IFC/components/subsets/SubsetUtils.ts","../src/IFC/components/subsets/SubsetCreator.ts","../src/IFC/components/subsets/SubsetManager.ts","../src/IFC/BaseDefinitions.ts","../src/IFC/components/properties/BasePropertyManager.ts","../src/IFC/components/IFCElementsMap.ts","../src/IFC/components/properties/WebIfcPropertyManager.ts","../src/IFC/components/IfcTypesMap.ts","../src/IFC/components/properties/JSONPropertyManager.ts","../src/IFC/components/properties/PropertyManager.ts","../src/IFC/components/TypeManager.ts","../src/IFC/components/BvhManager.ts","../src/IFC/web-workers/BaseDefinitions.ts","../src/IFC/web-workers/serializer/Vector.ts","../src/IFC/web-workers/serializer/IfcGeometry.ts","../src/IFC/web-workers/serializer/FlatMesh.ts","../src/IFC/web-workers/serializer/FlatMeshVector.ts","../src/IFC/web-workers/serializer/Material.ts","../src/IFC/web-workers/serializer/Geometry.ts","../src/IFC/web-workers/serializer/Mesh.ts","../src/IFC/web-workers/serializer/Serializer.ts","../src/IFC/web-workers/handlers/PropertyHandler.ts","../src/IFC/web-workers/handlers/WebIfcHandler.ts","../src/IFC/web-workers/handlers/WorkerStateHandler.ts","../src/IFC/indexedDB/IndexedDatabase.ts","../src/IFC/web-workers/handlers/ParserHandler.ts","../src/IFC/web-workers/IFCWorkerHandler.ts","../src/IFC/components/MemoryCleaner.ts","../src/IFC/components/IFCUtils.ts","../src/IFC/components/sequence/Data.ts","../src/IFC/components/IFCManager.ts","../src/IFCLoader.ts"],"sourcesContent":["import { BufferGeometry, Material, Mesh, Object3D, Scene } from 'three';\r\nimport { IFCManager } from './IFCManager';\r\nimport { BaseSubsetConfig } from '../BaseDefinitions';\r\n\r\nconst nullIfcManagerErrorMessage = 'IfcManager is null!';\r\n\r\n/**\r\n * Represents an IFC model. This object is returned by the `IFCLoader` after loading an IFC.\r\n * @geometry `THREE.Buffergeometry`, see Three.js documentation.\r\n * @materials `THREE.Material[]`, see Three.js documentation.\r\n * @manager contains all the logic to work with IFC.\r\n */\r\nexport class IFCModel extends Mesh {\r\n\r\n    private static modelIdCounter = 0;\r\n\r\n    static dispose() {\r\n        IFCModel.modelIdCounter = 0;\r\n    }\r\n\r\n    modelID = IFCModel.modelIdCounter++;\r\n    ifcManager: IFCManager | null = null;\r\n\r\n    /**\r\n     * @deprecated `IfcModel` is already a mesh; you can place it in the scene directly.\r\n     */\r\n    mesh = this;\r\n\r\n    setIFCManager(manager: IFCManager) {\r\n        this.ifcManager = manager;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.setWasmPath` instead.\r\n     *\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\r\n    setWasmPath(path: string) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.setWasmPath(path);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.close` instead.\r\n     *\r\n     * Closes the specified model and deletes it from the [scene](https://threejs.org/docs/#api/en/scenes/Scene).\r\n     * @scene Scene where the model is (if it's located in a scene).\r\n     */\r\n    close(scene?: Scene) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.close(this.modelID, scene);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getExpressId` instead.\r\n     *\r\n     * Gets the **Express ID** to which the given face belongs.\r\n     * This ID uniquely identifies this entity within this IFC file.\r\n     * @geometry The geometry of the IFC model.\r\n     * @faceIndex The index of the face of a geometry.You can easily get this index using the [Raycaster](https://threejs.org/docs/#api/en/core/Raycaster).\r\n     */\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getExpressId(geometry, faceIndex);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getAllItemsOfType` instead.\r\n     *\r\n     * Returns all items of the specified type. You can import\r\n     * the types from *web-ifc*.\r\n     *\r\n     * Example to get all the standard walls of a project:\r\n     * ```js\r\n     * import { IFCWALLSTANDARDCASE } from 'web-ifc';\r\n     * const walls = ifcLoader.getAllItemsOfType(IFCWALLSTANDARDCASE);\r\n     * ```\r\n     * @type The type of IFC items to get.\r\n     * @verbose If false (default), this only gets IDs. If true, this also gets the native properties of all the fetched items.\r\n     */\r\n    getAllItemsOfType(type: number, verbose: boolean) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getAllItemsOfType(this.modelID, type, verbose);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getItemProperties` instead.\r\n     *\r\n     * Gets the native properties of the given element.\r\n     * @id Express ID of the element.\r\n     * @recursive Wether you want to get the information of the referenced elements recursively.\r\n     */\r\n    getItemProperties(id: number, recursive = false) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getItemProperties(this.modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getPropertySets` instead.\r\n     *\r\n     * Gets the [property sets](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifckernel/lexical/ifcpropertyset.htm)\r\n     * assigned to the given element.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getPropertySets(id: number, recursive = false) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getPropertySets(this.modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getTypeProperties` instead.\r\n     *\r\n     * Gets the properties of the type assigned to the element.\r\n     * For example, if applied to a wall (IfcWall), this would get back the information\r\n     * contained in the IfcWallType assigned to it, if any.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getTypeProperties(id: number, recursive = false) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getTypeProperties(this.modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getIfcType` instead.\r\n     *\r\n     * Gets the ifc type of the specified item.\r\n     * @id Express ID of the element.\r\n     */\r\n    getIfcType(id: number) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getIfcType(this.modelID, id);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getSpatialStructure` instead.\r\n     *\r\n     * Gets the spatial structure of the project. The\r\n     * [spatial structure](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifcproductextension/lexical/ifcspatialstructureelement.htm)\r\n     * is the hierarchical structure that organizes every IFC project (all physical items\r\n     * are referenced to an element of the spatial structure). It is formed by\r\n     * one IfcProject that contains one or more IfcSites, that contain one or more\r\n     * IfcBuildings, that contain one or more IfcBuildingStoreys, that contain\r\n     * one or more IfcSpaces.\r\n     */\r\n    getSpatialStructure() {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getSpatialStructure(this.modelID);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.getSubset` instead.\r\n     *\r\n     * Gets the mesh of the subset with the specified [material](https://threejs.org/docs/#api/en/materials/Material).\r\n     * If no material is given, this returns the subset with the original materials.\r\n     * @material Material assigned to the subset, if any.\r\n     */\r\n    getSubset(material?: Material) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        return this.ifcManager.getSubset(this.modelID, material);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.removeSubset` instead.\r\n     *\r\n     * Removes the specified subset.\r\n     * @parent The parent where the subset is (can be any `THREE.Object3D`).\r\n     * @material Material assigned to the subset, if any.\r\n     */\r\n    removeSubset(material?: Material, customID?: string) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        this.ifcManager.removeSubset(this.modelID, material, customID);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use `IfcModel.ifcManager.createSubset` instead.\r\n     *\r\n     * Creates a new geometric subset.\r\n     * @config A configuration object with the following options:\r\n     * - **scene**: `THREE.Object3D` where the model is located.\r\n     * - **ids**: Express IDs of the items of the model that will conform the subset.\r\n     * - **removePrevious**: Wether to remove the previous subset of this model with this material.\r\n     * - **material**: (optional) Wether to apply a material to the subset\r\n     */\r\n    createSubset(config: BaseSubsetConfig) {\r\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\r\n        const modelConfig = { ...config, modelID: this.modelID };\r\n        return this.ifcManager.createSubset(modelConfig);\r\n    }\r\n}\r\n","//@ts-ignore\r\nimport {\r\n    PlacedGeometry,\r\n    Color as ifcColor,\r\n    IfcGeometry,\r\n    IFCSPACE,\r\n    FlatMesh,\r\n    IFCOPENINGELEMENT,\r\n    IFCPRODUCTDEFINITIONSHAPE\r\n} from 'web-ifc';\r\nimport { IfcState, IfcMesh } from '../BaseDefinitions';\r\nimport {\r\n    Color,\r\n    MeshLambertMaterial,\r\n    DoubleSide,\r\n    Matrix4,\r\n    BufferGeometry,\r\n    BufferAttribute,\r\n    Mesh\r\n} from 'three';\r\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';\r\nimport { BvhManager } from './BvhManager';\r\nimport { IFCModel } from './IFCModel';\r\n\r\nexport interface ParserProgress {\r\n    loaded: number;\r\n    total: number;\r\n}\r\n\r\nexport interface OptionalCategories {\r\n    [category: number]: boolean\r\n}\r\n\r\nexport interface ParserAPI {\r\n    parse(buffer: any, coordinationMatrix?: number[]): Promise<IFCModel>;\r\n\r\n    getAndClearErrors(_modelId: number): void;\r\n\r\n    setupOptionalCategories(config: OptionalCategories): Promise<void>;\r\n\r\n    optionalCategories: OptionalCategories;\r\n}\r\n\r\nexport interface GeometriesByMaterial {\r\n    [materialID: string]: {\r\n        material: MeshLambertMaterial,\r\n        geometries: BufferGeometry[]\r\n    }\r\n}\r\n\r\n/**\r\n * Reads all the geometry of the IFC file and generates an optimized `THREE.Mesh`.\r\n */\r\nexport class IFCParser implements ParserAPI {\r\n    loadedModels = 0;\r\n\r\n    optionalCategories: OptionalCategories = {\r\n        [IFCSPACE]: true,\r\n        [IFCOPENINGELEMENT]: false\r\n    };\r\n\r\n    private geometriesByMaterials: GeometriesByMaterial = {};\r\n\r\n    private loadingState = {\r\n        total: 0,\r\n        current: 0,\r\n        step: 0.1\r\n    }\r\n\r\n    // Represents the index of the model in webIfcAPI\r\n    private currentWebIfcID = -1;\r\n    // When using JSON data for optimization, webIfcAPI is reinitialized every time a model is loaded\r\n    // This means that currentID is always 0, while currentModelID is the real index of stored models\r\n    private currentModelID = -1;\r\n\r\n    // BVH is optional because when using workers we have to apply it in the main thread,\r\n    // once the model has been serialized and reconstructed\r\n    constructor(private state: IfcState, private BVH?: BvhManager) {\r\n    }\r\n\r\n    async setupOptionalCategories(config: OptionalCategories) {\r\n        this.optionalCategories = config;\r\n    }\r\n\r\n    async parse(buffer: any, coordinationMatrix?: number[]) {\r\n        if (this.state.api.wasmModule === undefined) await this.state.api.Init();\r\n        await this.newIfcModel(buffer);\r\n        this.loadedModels++;\r\n        if (coordinationMatrix) {\r\n            await this.state.api.SetGeometryTransformation(this.currentWebIfcID, coordinationMatrix);\r\n        }\r\n        return this.loadAllGeometry(this.currentWebIfcID);\r\n    }\r\n\r\n    getAndClearErrors(_modelId: number) {\r\n        // return this.state.api.GetAndClearErrors(modelId);\r\n    }\r\n\r\n    private notifyProgress(loaded: number, total: number) {\r\n        if (this.state.onProgress) this.state.onProgress({ loaded, total });\r\n    }\r\n\r\n    private async newIfcModel(buffer: any) {\r\n        const data = new Uint8Array(buffer);\r\n        this.currentWebIfcID = await this.state.api.OpenModel(data, this.state.webIfcSettings);\r\n        this.currentModelID = this.state.useJSON ? this.loadedModels : this.currentWebIfcID;\r\n        this.state.models[this.currentModelID] = {\r\n            modelID: this.currentModelID,\r\n            mesh: {} as IfcMesh,\r\n            types: {},\r\n            jsonData: {}\r\n        };\r\n    }\r\n\r\n    private async loadAllGeometry(modelID: number) {\r\n        this.addOptionalCategories(modelID);\r\n        await this.initializeLoadingState(modelID);\r\n\r\n        this.state.api.StreamAllMeshes(modelID, (mesh: FlatMesh) => {\r\n            this.updateLoadingState();\r\n            // only during the lifetime of this function call, the geometry is available in memory\r\n            this.streamMesh(modelID, mesh);\r\n        });\r\n\r\n        this.notifyLoadingEnded();\r\n        const geometries: BufferGeometry[] = [];\r\n        const materials: MeshLambertMaterial[] = [];\r\n\r\n        Object.keys(this.geometriesByMaterials).forEach((key) => {\r\n            const geometriesByMaterial = this.geometriesByMaterials[key].geometries;\r\n            const merged = mergeBufferGeometries(geometriesByMaterial);\r\n            materials.push(this.geometriesByMaterials[key].material);\r\n            geometries.push(merged);\r\n        });\r\n\r\n        const combinedGeometry = mergeBufferGeometries(geometries, true);\r\n        this.cleanUpGeometryMemory(geometries);\r\n        if (this.BVH) this.BVH.applyThreeMeshBVH(combinedGeometry);\r\n        const model = new IFCModel(combinedGeometry, materials);\r\n        this.state.models[this.currentModelID].mesh = model;\r\n        return model;\r\n    }\r\n\r\n    private async initializeLoadingState(modelID: number) {\r\n        const shapes = await this.state.api.GetLineIDsWithType(modelID, IFCPRODUCTDEFINITIONSHAPE);\r\n        this.loadingState.total = shapes.size();\r\n        this.loadingState.current = 0;\r\n        this.loadingState.step = 0.1;\r\n    }\r\n\r\n    private notifyLoadingEnded() {\r\n        this.notifyProgress(this.loadingState.total, this.loadingState.total);\r\n    }\r\n\r\n    private updateLoadingState() {\r\n        const realCurrentItem = Math.min(this.loadingState.current++, this.loadingState.total);\r\n        if(realCurrentItem / this.loadingState.total >= this.loadingState.step) {\r\n            const currentProgress = Math.ceil(this.loadingState.total * this.loadingState.step);\r\n            this.notifyProgress(currentProgress, this.loadingState.total);\r\n            this.loadingState.step += 0.1;\r\n        }\r\n    }\r\n\r\n    // Some categories (like IfcSpace and IfcOpeningElement) need to be set explicitly\r\n    private addOptionalCategories(modelID: number) {\r\n\r\n        const optionalTypes: number[] = [];\r\n\r\n        for (let key in this.optionalCategories) {\r\n            if (this.optionalCategories.hasOwnProperty(key)) {\r\n                const category = parseInt(key);\r\n                if (this.optionalCategories[category]) optionalTypes.push(category);\r\n            }\r\n        }\r\n\r\n        this.state.api.StreamAllMeshesWithTypes(this.currentWebIfcID, optionalTypes, (mesh: FlatMesh) => {\r\n            this.streamMesh(modelID, mesh);\r\n        });\r\n    }\r\n\r\n    private streamMesh(modelID: number, mesh: FlatMesh) {\r\n        const placedGeometries = mesh.geometries;\r\n        const size = placedGeometries.size();\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            const placedGeometry = placedGeometries.get(i);\r\n            let itemMesh = this.getPlacedGeometry(modelID, mesh.expressID, placedGeometry);\r\n            let geom = itemMesh.geometry.applyMatrix4(itemMesh.matrix);\r\n            this.storeGeometryByMaterial(placedGeometry.color, geom);\r\n        }\r\n    }\r\n\r\n    private getPlacedGeometry(modelID: number, expressID: number, placedGeometry: PlacedGeometry) {\r\n        const geometry = this.getBufferGeometry(modelID, expressID, placedGeometry);\r\n        const mesh = new Mesh(geometry);\r\n        mesh.matrix = this.getMeshMatrix(placedGeometry.flatTransformation);\r\n        mesh.matrixAutoUpdate = false;\r\n        return mesh;\r\n    }\r\n\r\n    private getBufferGeometry(modelID: number, expressID: number, placedGeometry: PlacedGeometry) {\r\n        const geometry = this.state.api.GetGeometry(modelID, placedGeometry.geometryExpressID) as IfcGeometry;\r\n        const verts = this.state.api.GetVertexArray(geometry.GetVertexData(), geometry.GetVertexDataSize()) as Float32Array;\r\n        const indices = this.state.api.GetIndexArray(geometry.GetIndexData(), geometry.GetIndexDataSize()) as Uint32Array;\r\n        const buffer = this.ifcGeometryToBuffer(expressID, verts, indices);\r\n        //@ts-ignore\r\n        geometry.delete();\r\n        return buffer;\r\n    }\r\n\r\n    private storeGeometryByMaterial(color: ifcColor, geometry: BufferGeometry) {\r\n        let colID = `${color.x}${color.y}${color.z}${color.w}`;\r\n        if (this.geometriesByMaterials[colID]) {\r\n            this.geometriesByMaterials[colID].geometries.push(geometry);\r\n            return;\r\n        }\r\n\r\n        const col = new Color(color.x, color.y, color.z);\r\n        const material = new MeshLambertMaterial({ color: col, side: DoubleSide });\r\n        material.transparent = color.w !== 1;\r\n        if (material.transparent) material.opacity = color.w;\r\n        this.geometriesByMaterials[colID] = { material, geometries: [geometry] };\r\n    }\r\n\r\n    private getMeshMatrix(matrix: Array<number>) {\r\n        const mat = new Matrix4();\r\n        mat.fromArray(matrix);\r\n        return mat;\r\n    }\r\n\r\n    private ifcGeometryToBuffer(expressID: number, vertexData: Float32Array, indexData: Uint32Array) {\r\n        const geometry = new BufferGeometry();\r\n\r\n        const posFloats = new Float32Array(vertexData.length / 2);\r\n        const normFloats = new Float32Array(vertexData.length / 2);\r\n        const idAttribute = new Uint32Array(vertexData.length / 6);\r\n\r\n        for (let i = 0; i < vertexData.length; i += 6) {\r\n            posFloats[i / 2] = vertexData[i];\r\n            posFloats[i / 2 + 1] = vertexData[i + 1];\r\n            posFloats[i / 2 + 2] = vertexData[i + 2];\r\n\r\n            normFloats[i / 2] = vertexData[i + 3];\r\n            normFloats[i / 2 + 1] = vertexData[i + 4];\r\n            normFloats[i / 2 + 2] = vertexData[i + 5];\r\n\r\n            idAttribute[i / 6] = expressID;\r\n        }\r\n\r\n        geometry.setAttribute(\r\n            'position',\r\n            new BufferAttribute(posFloats, 3));\r\n        geometry.setAttribute(\r\n            'normal',\r\n            new BufferAttribute(normFloats, 3));\r\n        geometry.setAttribute(\r\n            'expressID',\r\n            new BufferAttribute(idAttribute, 1));\r\n\r\n        geometry.setIndex(new BufferAttribute(indexData, 1));\r\n        return geometry;\r\n    }\r\n\r\n    // Three.js geometry has to be manually deallocated\r\n    private cleanUpGeometryMemory(geometries: BufferGeometry[]) {\r\n        geometries.forEach(geometry => geometry.dispose());\r\n\r\n        Object.keys(this.geometriesByMaterials).forEach((materialID) => {\r\n            const geometriesByMaterial = this.geometriesByMaterials[materialID];\r\n            geometriesByMaterial.geometries.forEach(geometry => geometry.dispose());\r\n            geometriesByMaterial.geometries = [];\r\n            // @ts-ignore\r\n            geometriesByMaterial.material = null;\r\n        });\r\n        this.geometriesByMaterials = {};\r\n    }\r\n}\r\n","import { IfcState } from '../../BaseDefinitions';\r\nimport { BufferAttribute, BufferGeometry, Material } from 'three';\r\n\r\n// The number array has the meaning: [start, end, start, end, start, end...]\r\nexport interface Indices {\r\n    [materialID: number]: number[]\r\n}\r\n\r\nexport interface IndexedGeometry extends BufferGeometry {\r\n    index: BufferAttribute;\r\n}\r\n\r\nexport interface Group {\r\n    start: number,\r\n    count: number,\r\n    materialIndex?: number\r\n}\r\n\r\nexport interface Items {\r\n    indexCache: Uint32Array,\r\n    map: Map<number, Indices>\r\n}\r\n\r\nexport interface IndicesMap {\r\n    [modelID: number]: {\r\n        indexCache: Uint32Array;\r\n        map: Map<number, Indices>;\r\n    }\r\n}\r\n\r\nexport class ItemsMap {\r\n\r\n    constructor(private state: IfcState) {\r\n    }\r\n\r\n    map: IndicesMap = {};\r\n\r\n    generateGeometryIndexMap(modelID: number) {\r\n        if (this.map[modelID]) return;\r\n        const geometry = this.getGeometry(modelID);\r\n        const items = this.newItemsMap(modelID, geometry);\r\n        for (const group of geometry.groups) {\r\n            this.fillItemsWithGroupInfo(group, geometry, items);\r\n        }\r\n    }\r\n\r\n    getSubsetID(modelID: number, material?: Material, customID = 'DEFAULT') {\r\n        const baseID = modelID;\r\n        const materialID = material ? material.uuid : 'DEFAULT';\r\n        return `${baseID} - ${materialID} - ${customID}`;\r\n    }\r\n\r\n    // Use this only for destroying the current IFCLoader instance\r\n    dispose() {\r\n        Object.values(this.map).forEach(model => {\r\n            (model.indexCache as any) = null;\r\n            (model.map as any) = null;\r\n        });\r\n\r\n        (this.map as any) = null;\r\n    }\r\n\r\n    private getGeometry(modelID: number) {\r\n        const geometry = this.state.models[modelID].mesh.geometry;\r\n        if (!geometry) throw new Error('Model without geometry.');\r\n        if (!geometry.index) throw new Error('Geometry must be indexed');\r\n        return geometry as IndexedGeometry;\r\n    }\r\n\r\n    private newItemsMap(modelID: number, geometry: IndexedGeometry) {\r\n        const startIndices = geometry.index.array as Uint32Array;\r\n        this.map[modelID] = {\r\n            indexCache: startIndices.slice(0, geometry.index.array.length),\r\n            map: new Map()\r\n        };\r\n        return this.map[modelID] as Items;\r\n    }\r\n\r\n    private fillItemsWithGroupInfo(group: Group, geometry: IndexedGeometry, items: Items) {\r\n        let prevExpressID = -1;\r\n\r\n        const materialIndex = group.materialIndex as number;\r\n        const materialStart = group.start;\r\n        const materialEnd = materialStart + group.count - 1;\r\n\r\n        let objectStart = -1;\r\n        let objectEnd = -1;\r\n\r\n        for (let i = materialStart; i <= materialEnd; i++) {\r\n            const index = geometry.index.array[i];\r\n            const expressID = geometry.attributes.expressID.array[index];\r\n\r\n            // First iteration\r\n            if (prevExpressID === -1) {\r\n                prevExpressID = expressID;\r\n                objectStart = i;\r\n            }\r\n\r\n            // It's the end of the material, which also means end of the object\r\n            const isEndOfMaterial = i === materialEnd;\r\n            if (isEndOfMaterial) {\r\n                const store = this.getMaterialStore(items.map, expressID, materialIndex);\r\n                store.push(objectStart, materialEnd);\r\n                break;\r\n            }\r\n\r\n            // Still going through the same object\r\n            if (prevExpressID === expressID) continue;\r\n\r\n            // New object starts; save previous object\r\n\r\n            // Store previous object\r\n            const store = this.getMaterialStore(items.map, prevExpressID, materialIndex);\r\n            objectEnd = i - 1;\r\n            store.push(objectStart, objectEnd);\r\n\r\n            // Get ready to process next object\r\n            prevExpressID = expressID;\r\n            objectStart = i;\r\n        }\r\n    }\r\n\r\n    private getMaterialStore(map: Map<number, Indices>, id: number, matIndex: number) {\r\n        // If this object wasn't store before, add it to the map\r\n        if (map.get(id) === undefined) {\r\n            map.set(id, {});\r\n        }\r\n        const storedIfcItem = map.get(id);\r\n        if (storedIfcItem === undefined) throw new Error('Geometry map generation error');\r\n\r\n        // If this material wasn't stored for this object before, add it to the object\r\n        if (storedIfcItem[matIndex] === undefined) {\r\n            storedIfcItem[matIndex] = [];\r\n        }\r\n        return storedIfcItem[matIndex];\r\n    }\r\n\r\n}","export class SubsetUtils {\r\n\r\n    // If flatten, all indices are in the same array; otherwise, indices are split in subarrays by material\r\n    static getAllIndicesOfGroup(modelID: number, ids: number[], materialIndex: number, items: any, flatten = true) {\r\n        const indicesByGroup: any = [];\r\n        for (const expressID of ids) {\r\n            const entry = items.map.get(expressID);\r\n            if (!entry) continue;\r\n            const value = entry[materialIndex];\r\n            if (!value) continue;\r\n            SubsetUtils.getIndexChunk(value, indicesByGroup, materialIndex, items, flatten);\r\n        }\r\n        return indicesByGroup;\r\n    }\r\n\r\n    private static getIndexChunk(value: number[], indicesByGroup: any, materialIndex: number, items: any, flatten: boolean) {\r\n        const pairs = value.length / 2;\r\n        for (let pair = 0; pair < pairs; pair++) {\r\n            const pairIndex = pair * 2;\r\n            const start = value[pairIndex];\r\n            const end = value[pairIndex + 1];\r\n            for (let j = start; j <= end; j++) {\r\n                if(flatten) indicesByGroup.push(items.indexCache[j]);\r\n                else {\r\n                    if (!indicesByGroup[materialIndex]) indicesByGroup[materialIndex] = [];\r\n                    indicesByGroup[materialIndex].push(items.indexCache[j]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { BufferGeometry, Mesh } from 'three';\r\nimport { IfcState, SubsetConfig } from '../../BaseDefinitions';\r\nimport { IndexedGeometry, ItemsMap } from './ItemsMap';\r\nimport { Subset, Subsets } from './SubsetManager';\r\nimport { SubsetUtils } from './SubsetUtils';\r\nimport { BvhManager } from '../BvhManager';\r\n\r\nexport class SubsetCreator {\r\n\r\n    private tempIndex: number[] = [];\r\n\r\n    constructor(private state: IfcState, private items: ItemsMap, private subsets: Subsets, private BVH: BvhManager) {\r\n    }\r\n\r\n    createSubset(config: SubsetConfig, subsetID: string) {\r\n        if (!this.items.map[config.modelID]) this.items.generateGeometryIndexMap(config.modelID);\r\n        if (!this.subsets[subsetID]) this.initializeSubset(config, subsetID);\r\n        this.filterIndices(config, subsetID);\r\n        this.constructSubsetByMaterial(config, subsetID);\r\n        config.ids.forEach(id => this.subsets[subsetID].ids.add(id));\r\n        this.subsets[subsetID].mesh.geometry.setIndex(this.tempIndex);\r\n        this.tempIndex.length = 0;\r\n        const subset = this.subsets[subsetID].mesh;\r\n        if (config.applyBVH) this.BVH.applyThreeMeshBVH(subset.geometry);\r\n        if (config.scene) config.scene.add(subset);\r\n        return this.subsets[subsetID].mesh;\r\n    }\r\n\r\n    dispose() {\r\n        this.tempIndex = [];\r\n    }\r\n\r\n    private initializeSubset(config: SubsetConfig, subsetID: string) {\r\n        const model = this.state.models[config.modelID].mesh;\r\n        const subsetGeom = new BufferGeometry();\r\n        this.initializeSubsetAttributes(subsetGeom, model);\r\n        if (!config.material) this.initializeSubsetGroups(subsetGeom, model);\r\n        const mesh = new Mesh(subsetGeom, config.material || model.material) as Subset;\r\n        mesh.modelID = config.modelID;\r\n        const bvh = Boolean(config.applyBVH);\r\n        this.subsets[subsetID] = { ids: new Set<number>(), mesh, bvh };\r\n        model.add(mesh);\r\n    }\r\n\r\n    // The subset shares the same attributes as the original (no memory consumed)\r\n    private initializeSubsetAttributes(subsetGeom: BufferGeometry, model: Mesh) {\r\n        subsetGeom.setAttribute('position', model.geometry.attributes.position);\r\n        subsetGeom.setAttribute('normal', model.geometry.attributes.normal);\r\n        subsetGeom.setAttribute('expressID', model.geometry.attributes.expressID);\r\n        subsetGeom.setIndex([]);\r\n    }\r\n\r\n    // If the subset has original materials, initialize the groups for the subset\r\n    private initializeSubsetGroups(subsetGeom: BufferGeometry, model: Mesh) {\r\n        subsetGeom.groups = JSON.parse(JSON.stringify(model.geometry.groups));\r\n        this.resetGroups(subsetGeom);\r\n    }\r\n\r\n    // Remove previous indices or filter the given ones to avoid repeating items\r\n    private filterIndices(config: SubsetConfig, subsetID: string) {\r\n        const geometry = this.subsets[subsetID].mesh.geometry as IndexedGeometry;\r\n        if (config.removePrevious) {\r\n            geometry.setIndex([]);\r\n            this.resetGroups(geometry);\r\n            return;\r\n        }\r\n        const previousIndices = geometry.index.array;\r\n        const previousIDs = this.subsets[subsetID].ids;\r\n        config.ids = config.ids.filter(id => !previousIDs.has(id));\r\n        this.tempIndex = Array.from(previousIndices);\r\n    }\r\n\r\n    private constructSubsetByMaterial(config: SubsetConfig, subsetID: string) {\r\n        const model = this.state.models[config.modelID].mesh;\r\n        const newIndices = { count: 0 };\r\n        for (let i = 0; i < model.geometry.groups.length; i++) {\r\n            this.insertNewIndices(config, subsetID, i, newIndices);\r\n        }\r\n    }\r\n\r\n    // If this subset has original materials, insert indices in correct position and update groups\r\n    // Otherwise, just insert indices at any position\r\n    private insertNewIndices(config: SubsetConfig, subsetID: string, materialIndex: number, newIndices: any) {\r\n        const items = this.items.map[config.modelID];\r\n        const indicesOfOneMaterial = SubsetUtils.getAllIndicesOfGroup(config.modelID, config.ids, materialIndex, items) as number[];\r\n\r\n        if (!config.material) {\r\n            this.insertIndicesAtGroup(subsetID, indicesOfOneMaterial, materialIndex, newIndices);\r\n        } else {\r\n            indicesOfOneMaterial.forEach(index => this.tempIndex.push(index));\r\n        }\r\n    }\r\n\r\n    private insertIndicesAtGroup(subsetID: string, indicesByGroup: number[], index: number, newIndices: any) {\r\n        const currentGroup = this.getCurrentGroup(subsetID, index);\r\n        currentGroup.start += newIndices.count;\r\n        let newIndicesPosition = currentGroup.start + currentGroup.count;\r\n        newIndices.count += indicesByGroup.length;\r\n        if (indicesByGroup.length > 0) {\r\n            let position = newIndicesPosition;\r\n            const start = this.tempIndex.slice(0, position);\r\n            const end = this.tempIndex.slice(position);\r\n            this.tempIndex = Array.prototype.concat.apply([], [start, indicesByGroup, end]);\r\n            currentGroup.count += indicesByGroup.length;\r\n        }\r\n    }\r\n\r\n    private getCurrentGroup(subsetID: string, groupIndex: number) {\r\n        const geometry = this.subsets[subsetID].mesh.geometry as IndexedGeometry;\r\n        return geometry.groups[groupIndex];\r\n    }\r\n\r\n    private resetGroups(geometry: BufferGeometry) {\r\n        geometry.groups.forEach((group) => {\r\n            group.start = 0;\r\n            group.count = 0;\r\n        });\r\n    }\r\n}","import { Material, Mesh, Object3D } from 'three';\r\nimport { SubsetConfig, IfcState } from '../../BaseDefinitions';\r\nimport { BvhManager } from '../BvhManager';\r\nimport { ItemsMap } from './ItemsMap';\r\nimport { SubsetCreator } from './SubsetCreator';\r\n\r\nexport interface Subset extends Mesh {\r\n    modelID: number;\r\n}\r\n\r\nexport type Subsets = {\r\n    [subsetID: string]: { ids: Set<number>, mesh: Subset, bvh: boolean };\r\n};\r\n\r\n/**\r\n * Contains the logic to get, create and delete geometric subsets of an IFC model. For example,\r\n * this can extract all the items in a specific IfcBuildingStorey and create a new Mesh.\r\n */\r\nexport class SubsetManager {\r\n    readonly items: ItemsMap;\r\n    private readonly BVH: BvhManager;\r\n    private state: IfcState;\r\n    private subsets: Subsets = {};\r\n    private subsetCreator: SubsetCreator;\r\n\r\n    constructor(state: IfcState, BVH: BvhManager) {\r\n        this.state = state;\r\n        this.items = new ItemsMap(state);\r\n        this.BVH = BVH;\r\n        this.subsetCreator = new SubsetCreator(state, this.items, this.subsets, this.BVH);\r\n    }\r\n\r\n    getAllSubsets(){\r\n        return this.subsets\r\n    }\r\n\r\n    getSubset(modelID: number, material?: Material, customId?: string) {\r\n        const subsetID = this.getSubsetID(modelID, material, customId);\r\n        return this.subsets[subsetID].mesh;\r\n    }\r\n\r\n    removeSubset(modelID: number, material?: Material, customID?: string) {\r\n        const subsetID = this.getSubsetID(modelID, material, customID);\r\n        const subset = this.subsets[subsetID];\r\n        if (!subset) return;\r\n        if (subset.mesh.parent) subset.mesh.removeFromParent();\r\n        subset.mesh.geometry.attributes = {};\r\n        subset.mesh.geometry.index = null;\r\n        subset.mesh.geometry.dispose();\r\n        // @ts-ignore\r\n        subset.mesh.geometry = null;\r\n        delete this.subsets[subsetID];\r\n    }\r\n\r\n    createSubset(config: SubsetConfig) {\r\n        const subsetID = this.getSubsetID(config.modelID, config.material, config.customID);\r\n        return this.subsetCreator.createSubset(config, subsetID);\r\n    }\r\n\r\n    removeFromSubset(modelID: number, ids: number[], customID?: string, material?: Material) {\r\n        const subsetID = this.getSubsetID(modelID, material, customID);\r\n        if (!this.subsets[subsetID]) return;\r\n\r\n        const previousIDs = this.subsets[subsetID].ids;\r\n        ids.forEach((id) => {\r\n            if(previousIDs.has(id)) previousIDs.delete(id);\r\n        })\r\n\r\n        return this.createSubset({\r\n            modelID,\r\n            removePrevious: true,\r\n            material,\r\n            customID,\r\n            applyBVH: this.subsets[subsetID].bvh,\r\n            ids: Array.from(previousIDs),\r\n            scene: this.subsets[subsetID].mesh.parent as Object3D\r\n        });\r\n    }\r\n\r\n    clearSubset(modelID: number, customID?: string, material?: Material) {\r\n        const subsetID = this.getSubsetID(modelID, material, customID);\r\n        if (!this.subsets[subsetID]) return;\r\n        this.subsets[subsetID].ids.clear();\r\n        const subset = this.getSubset(modelID, material, customID);\r\n        subset.geometry.setIndex([]);\r\n    }\r\n\r\n    // Use this only for destroying the current IFCLoader instance\r\n    dispose() {\r\n        this.items.dispose();\r\n        this.subsetCreator.dispose();\r\n\r\n        Object.values(this.subsets).forEach(subset => {\r\n            (subset.ids as any) = null;\r\n            subset.mesh.removeFromParent();\r\n            const mats = subset.mesh.material;\r\n            if(Array.isArray(mats)) mats.forEach(mat => mat.dispose());\r\n            else mats.dispose();\r\n            subset.mesh.geometry.index = null;\r\n            subset.mesh.geometry.dispose();\r\n            const geom = subset.mesh.geometry as any;\r\n            if(geom.disposeBoundsTree) geom.disposeBoundsTree();\r\n            (subset.mesh as any) = null;\r\n        });\r\n        (this.subsets as any) = null;\r\n    }\r\n\r\n    private getSubsetID(modelID: number, material?: Material, customID = 'DEFAULT') {\r\n        const baseID = modelID;\r\n        const materialID = material ? material.uuid : 'DEFAULT';\r\n        return `${baseID} - ${materialID} - ${customID}`;\r\n    }\r\n}\r\n","import { BufferAttribute, BufferGeometry, Material, Matrix4, Mesh, Object3D } from 'three';\r\n// TODO: Remove ts ignore comments when @types/three gets updated\r\n// @ts-ignore\r\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';\r\nimport {\r\n    FlatMesh,\r\n    IfcGeometry,\r\n    IFCRELAGGREGATES, IFCRELASSOCIATESMATERIAL,\r\n    IFCRELCONTAINEDINSPATIALSTRUCTURE,\r\n    IFCRELDEFINESBYPROPERTIES,\r\n    IFCRELDEFINESBYTYPE, LoaderError, LoaderSettings, RawLineData, Vector\r\n} from 'web-ifc';\r\nimport {ParserProgress} from \"./components/IFCParser\";\r\n\r\nexport const IdAttrName = 'expressID';\r\n\r\nexport type IdAttributeByMaterial = { [id: number]: number };\r\nexport type IdAttributesByMaterials = { [materialID: string]: IdAttributeByMaterial };\r\n\r\n//TODO: Rename \"scene\" to \"parent\" in the next major release\r\nexport interface BaseSubsetConfig {\r\n    scene?: Object3D;\r\n    ids: number[];\r\n    removePrevious: boolean;\r\n    material?: Material;\r\n    customID?: string;\r\n    applyBVH?: boolean;\r\n}\r\n\r\nexport interface SubsetConfig extends BaseSubsetConfig {\r\n    modelID: number;\r\n}\r\n\r\nexport const DEFAULT = 'default';\r\n\r\nexport type MapFaceindexID = { [key: number]: number };\r\n\r\nexport interface TypesMap {\r\n    [key: number]: number;\r\n}\r\n\r\n\r\nexport interface IfcModel {\r\n    modelID: number;\r\n    mesh: IfcMesh;\r\n    types: TypesMap;\r\n    jsonData: { [id: number]: JSONObject };\r\n}\r\n\r\nexport interface JSONObject {\r\n    expressID: number;\r\n    type: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface Worker {\r\n    active: boolean;\r\n    path: string;\r\n}\r\n\r\nexport interface IfcState {\r\n    models: { [modelID: number]: IfcModel };\r\n    api: WebIfcAPI;\r\n    useJSON: boolean;\r\n    worker: Worker;\r\n    webIfcSettings?: LoaderSettings;\r\n    onProgress?: (event: ParserProgress) => void;\r\n    coordinationMatrix?: Matrix4,\r\n    wasmPath?: string;\r\n}\r\n\r\nexport interface IfcMesh extends Mesh {\r\n    modelID: number;\r\n}\r\n\r\nexport interface Node {\r\n    expressID: number;\r\n    type: string;\r\n    children: Node[];\r\n}\r\n\r\nexport interface pName {\r\n    name: number;\r\n    relating: string;\r\n    related: string;\r\n    key: string;\r\n}\r\n\r\nexport const PropsNames = {\r\n    aggregates: {\r\n        name: IFCRELAGGREGATES,\r\n        relating: 'RelatingObject',\r\n        related: 'RelatedObjects',\r\n        key: 'children'\r\n    },\r\n    spatial: {\r\n        name: IFCRELCONTAINEDINSPATIALSTRUCTURE,\r\n        relating: 'RelatingStructure',\r\n        related: 'RelatedElements',\r\n        key: 'children'\r\n    },\r\n    psets: {\r\n        name: IFCRELDEFINESBYPROPERTIES,\r\n        relating: 'RelatingPropertyDefinition',\r\n        related: 'RelatedObjects',\r\n        key: 'hasPsets'\r\n    },\r\n    materials: {\r\n        name: IFCRELASSOCIATESMATERIAL,\r\n        relating: 'RelatingMaterial',\r\n        related: 'RelatedObjects',\r\n        key: 'hasMaterial'\r\n    },\r\n    type: {\r\n        name: IFCRELDEFINESBYTYPE,\r\n        relating: 'RelatingType',\r\n        related: 'RelatedObjects',\r\n        key: 'hasType'\r\n    }\r\n};\r\n\r\nexport interface WebIfcAPI {\r\n\r\n    wasmModule: any;\r\n\r\n    Init(): void | Promise<void>;\r\n\r\n    // To close the web worker\r\n    Close?: () => void;\r\n\r\n    /**\r\n     * Opens a model and returns a modelID number\r\n     * @data Buffer containing IFC data (bytes)\r\n     * @data Settings settings for loading the model\r\n     */\r\n    OpenModel(data: string | Uint8Array, settings?: LoaderSettings): number | Promise<number>;\r\n\r\n    /**\r\n     * Creates a new model and returns a modelID number\r\n     * @data Settings settings for generating data the model\r\n     */\r\n    CreateModel(settings?: LoaderSettings): number | Promise<number>;\r\n\r\n    ExportFileAsIFC(modelID: number): Uint8Array | Promise<Uint8Array>;\r\n\r\n    /**\r\n     * Opens a model and returns a modelID number\r\n     * @modelID Model handle retrieved by OpenModel, model must not be closed\r\n     * @data Buffer containing IFC data (bytes)\r\n     */\r\n    GetGeometry(modelID: number, geometryExpressID: number): IfcGeometry | Promise<IfcGeometry>;\r\n\r\n    GetLine(modelID: number, expressID: number, flatten?: boolean):  any | Promise<any>;\r\n\r\n    GetAndClearErrors(modelID: number): Vector<LoaderError> | Promise<Vector<LoaderError>>;\r\n\r\n    WriteLine(modelID: number, lineObject: any): void | Promise<void>;\r\n\r\n    FlattenLine(modelID: number, line: any): void | Promise<void>;\r\n\r\n    GetRawLineData(modelID: number, expressID: number): RawLineData | Promise<RawLineData>;\r\n\r\n    WriteRawLineData(modelID: number, data: RawLineData):  any | Promise<any>;\r\n\r\n    GetLineIDsWithType(modelID: number, type: number): Vector<number> | Promise<Vector<number>>;\r\n\r\n    GetAllLines(modelID: Number): Vector<number> | Promise<Vector<number>>;\r\n\r\n    SetGeometryTransformation(modelID: number, transformationMatrix: Array<number>): void | Promise<void>;\r\n\r\n    GetCoordinationMatrix(modelID: number): Array<number> | Promise<Array<number>>;\r\n\r\n    GetVertexArray(ptr: number, size: number): Float32Array | Promise<Float32Array>;\r\n\r\n    GetIndexArray(ptr: number, size: number): Uint32Array | Promise<Uint32Array>;\r\n\r\n    getSubArray(heap: any, startPtr: any, sizeBytes: any): any | Promise<any>;\r\n\r\n    /**\r\n     * Closes a model and frees all related memory\r\n     * @modelID Model handle retrieved by OpenModel, model must not be closed\r\n     */\r\n    CloseModel(modelID: number): void | Promise<void>;\r\n\r\n    StreamAllMeshes(modelID: number, meshCallback: (mesh: FlatMesh) => void): void | Promise<void>;\r\n\r\n    StreamAllMeshesWithTypes(modelID: number, types: Array<number>, meshCallback: (mesh: FlatMesh) => void): void | Promise<void>;\r\n\r\n    /**\r\n     * Checks if a specific model ID is open or closed\r\n     * @modelID Model handle retrieved by OpenModel\r\n     */\r\n    IsModelOpen(modelID: number): boolean | Promise<boolean>;\r\n\r\n    /**\r\n     * Load all geometry in a model\r\n     * @modelID Model handle retrieved by OpenModel\r\n     */\r\n    LoadAllGeometry(modelID: number): Vector<FlatMesh> | Promise<Vector<FlatMesh>>;\r\n\r\n    /**\r\n     * Load geometry for a single element\r\n     * @modelID Model handle retrieved by OpenModel\r\n     */\r\n    GetFlatMesh(modelID: number, expressID: number): FlatMesh | Promise<FlatMesh>;\r\n\r\n    SetWasmPath(path: string): void | Promise<void>;\r\n}\r\n","import { IfcState, pName, PropsNames, Node } from '../../BaseDefinitions';\r\n\r\nexport class BasePropertyManager {\r\n\r\n    constructor(protected state: IfcState) {\r\n    }\r\n\r\n    async getPropertySets(modelID: number, elementID: number, recursive = false) {\r\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.psets);\r\n    }\r\n\r\n    async getTypeProperties(modelID: number, elementID: number, recursive = false) {\r\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.type);\r\n    }\r\n\r\n    async getMaterialsProperties(modelID: number, elementID: number, recursive = false) {\r\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.materials);\r\n    }\r\n\r\n    protected async getSpatialNode(modelID: number, node: Node, treeChunks: any, includeProperties?: boolean) {\r\n        await this.getChildren(modelID, node, treeChunks, PropsNames.aggregates, includeProperties);\r\n        await this.getChildren(modelID, node, treeChunks, PropsNames.spatial, includeProperties);\r\n    }\r\n\r\n    protected async getChildren(modelID: number, node: Node, treeChunks: any, propNames: pName, includeProperties?: boolean) {\r\n        const children = treeChunks[node.expressID];\r\n        if (children == undefined) return;\r\n        const prop = propNames.key as keyof Node;\r\n        const nodes: any[] = [];\r\n        for(let i = 0; i < children.length; i++){\r\n            const child = children[i];\r\n            let node = this.newNode(modelID, child);\r\n            if (includeProperties) {\r\n                const properties = await this.getItemProperties(modelID, node.expressID) as any;\r\n                node = { ...properties, ...node };\r\n            }\r\n            await this.getSpatialNode(modelID, node, treeChunks, includeProperties);\r\n            nodes.push(node);\r\n        }\r\n        (node[prop] as Node[]) = nodes;\r\n    }\r\n\r\n    protected newNode(modelID: number, id: number) {\r\n        const typeName = this.getNodeType(modelID, id);\r\n        return {\r\n            expressID: id,\r\n            type: typeName,\r\n            children: []\r\n        };\r\n    }\r\n\r\n    protected async getSpatialTreeChunks(modelID: number) {\r\n        const treeChunks: any = {};\r\n        await this.getChunks(modelID, treeChunks, PropsNames.aggregates);\r\n        await this.getChunks(modelID, treeChunks, PropsNames.spatial);\r\n        return treeChunks;\r\n    }\r\n\r\n    protected saveChunk(chunks: any, propNames: pName, rel: any) {\r\n        const relating = rel[propNames.relating].value;\r\n        const related = rel[propNames.related].map((r: any) => r.value);\r\n        if (chunks[relating] == undefined) {\r\n            chunks[relating] = related;\r\n        } else {\r\n            chunks[relating] = chunks[relating].concat(related);\r\n        }\r\n    }\r\n\r\n    protected getRelated(rel: any, propNames: pName, IDs: number[]) {\r\n        const element = rel[propNames.relating];\r\n        if(!element) {\r\n            return console.warn(`The object with ID ${rel.expressID} has a broken reference.`);\r\n        }\r\n        if (!Array.isArray(element)) IDs.push(element.value);\r\n        else element.forEach((ele) => IDs.push(ele.value));\r\n    }\r\n\r\n    protected static isRelated(id: number, rel: any, propNames: pName) {\r\n        const relatedItems = rel[propNames.related];\r\n        if (Array.isArray(relatedItems)) {\r\n            const values = relatedItems.map((item) => item.value);\r\n            return values.includes(id);\r\n        }\r\n        return relatedItems.value === id;\r\n    }\r\n\r\n    protected static newIfcProject(id: number) {\r\n        return {\r\n            expressID: id,\r\n            type: 'IFCPROJECT',\r\n            children: []\r\n        };\r\n    }\r\n\r\n    async getProperty(modelID: number, elementID: number, recursive = false, propName: pName): Promise<any> {\r\n    }\r\n\r\n    protected async getChunks(modelID: number, chunks: any, propNames: pName): Promise<void> {\r\n    }\r\n\r\n    protected async getItemProperties(modelID: number, expressID: number, recursive = false): Promise<any> {\r\n    }\r\n\r\n    protected getNodeType(modelID: number, id: number): any {\r\n    }\r\n}","export let IfcElements: {[key: number]: string} = {\r\n  103090709: 'IFCPROJECT',\r\n  4097777520: 'IFCSITE',\r\n  4031249490: 'IFCBUILDING',\r\n  3124254112: 'IFCBUILDINGSTOREY',\r\n  3856911033: 'IFCSPACE',\r\n  1674181508: 'IFCANNOTATION',\r\n  25142252: 'IFCCONTROLLER',\r\n  32344328: 'IFCBOILER',\r\n  76236018: 'IFCLAMP',\r\n  90941305: 'IFCPUMP',\r\n  177149247: 'IFCAIRTERMINALBOX',\r\n  182646315: 'IFCFLOWINSTRUMENT',\r\n  263784265: 'IFCFURNISHINGELEMENT',\r\n  264262732: 'IFCELECTRICGENERATOR',\r\n  277319702: 'IFCAUDIOVISUALAPPLIANCE',\r\n  310824031: 'IFCPIPEFITTING',\r\n  331165859: 'IFCSTAIR',\r\n  342316401: 'IFCDUCTFITTING',\r\n  377706215: 'IFCMECHANICALFASTENER',\r\n  395920057: 'IFCDOOR',\r\n  402227799: 'IFCELECTRICMOTOR',\r\n  413509423: 'IFCSYSTEMFURNITUREELEMENT',\r\n  484807127: 'IFCEVAPORATOR',\r\n  486154966: 'IFCWINDOWSTANDARDCASE',\r\n  629592764: 'IFCLIGHTFIXTURE',\r\n  630975310: 'IFCUNITARYCONTROLELEMENT',\r\n  635142910: 'IFCCABLECARRIERFITTING',\r\n  639361253: 'IFCCOIL',\r\n  647756555: 'IFCFASTENER',\r\n  707683696: 'IFCFLOWSTORAGEDEVICE',\r\n  738039164: 'IFCPROTECTIVEDEVICE',\r\n  753842376: 'IFCBEAM',\r\n  812556717: 'IFCTANK',\r\n  819412036: 'IFCFILTER',\r\n  843113511: 'IFCCOLUMN',\r\n  862014818: 'IFCELECTRICDISTRIBUTIONBOARD',\r\n  900683007: 'IFCFOOTING',\r\n  905975707: 'IFCCOLUMNSTANDARDCASE',\r\n  926996030: 'IFCVOIDINGFEATURE',\r\n  979691226: 'IFCREINFORCINGBAR',\r\n  987401354: 'IFCFLOWSEGMENT',\r\n  1003880860: 'IFCELECTRICTIMECONTROL',\r\n  1051757585: 'IFCCABLEFITTING',\r\n  1052013943: 'IFCDISTRIBUTIONCHAMBERELEMENT',\r\n  1062813311: 'IFCDISTRIBUTIONCONTROLELEMENT',\r\n  1073191201: 'IFCMEMBER',\r\n  1095909175: 'IFCBUILDINGELEMENTPROXY',\r\n  1156407060: 'IFCPLATESTANDARDCASE',\r\n  1162798199: 'IFCSWITCHINGDEVICE',\r\n  1329646415: 'IFCSHADINGDEVICE',\r\n  1335981549: 'IFCDISCRETEACCESSORY',\r\n  1360408905: 'IFCDUCTSILENCER',\r\n  1404847402: 'IFCSTACKTERMINAL',\r\n  1426591983: 'IFCFIRESUPPRESSIONTERMINAL',\r\n  1437502449: 'IFCMEDICALDEVICE',\r\n  1509553395: 'IFCFURNITURE',\r\n  1529196076: 'IFCSLAB',\r\n  1620046519: 'IFCTRANSPORTELEMENT',\r\n  1634111441: 'IFCAIRTERMINAL',\r\n  1658829314: 'IFCENERGYCONVERSIONDEVICE',\r\n  1677625105: 'IFCCIVILELEMENT',\r\n  1687234759: 'IFCPILE',\r\n  1904799276: 'IFCELECTRICAPPLIANCE',\r\n  1911478936: 'IFCMEMBERSTANDARDCASE',\r\n  1945004755: 'IFCDISTRIBUTIONELEMENT',\r\n  1973544240: 'IFCCOVERING',\r\n  1999602285: 'IFCSPACEHEATER',\r\n  2016517767: 'IFCROOF',\r\n  2056796094: 'IFCAIRTOAIRHEATRECOVERY',\r\n  2058353004: 'IFCFLOWCONTROLLER',\r\n  2068733104: 'IFCHUMIDIFIER',\r\n  2176052936: 'IFCJUNCTIONBOX',\r\n  2188021234: 'IFCFLOWMETER',\r\n  2223149337: 'IFCFLOWTERMINAL',\r\n  2262370178: 'IFCRAILING',\r\n  2272882330: 'IFCCONDENSER',\r\n  2295281155: 'IFCPROTECTIVEDEVICETRIPPINGUNIT',\r\n  2320036040: 'IFCREINFORCINGMESH',\r\n  2347447852: 'IFCTENDONANCHOR',\r\n  2391383451: 'IFCVIBRATIONISOLATOR',\r\n  2391406946: 'IFCWALL',\r\n  2474470126: 'IFCMOTORCONNECTION',\r\n  2769231204: 'IFCVIRTUALELEMENT',\r\n  2814081492: 'IFCENGINE',\r\n  2906023776: 'IFCBEAMSTANDARDCASE',\r\n  2938176219: 'IFCBURNER',\r\n  2979338954: 'IFCBUILDINGELEMENTPART',\r\n  3024970846: 'IFCRAMP',\r\n  3026737570: 'IFCTUBEBUNDLE',\r\n  3027962421: 'IFCSLABSTANDARDCASE',\r\n  3040386961: 'IFCDISTRIBUTIONFLOWELEMENT',\r\n  3053780830: 'IFCSANITARYTERMINAL',\r\n  3079942009: 'IFCOPENINGSTANDARDCASE',\r\n  3087945054: 'IFCALARM',\r\n  3101698114: 'IFCSURFACEFEATURE',\r\n  3127900445: 'IFCSLABELEMENTEDCASE',\r\n  3132237377: 'IFCFLOWMOVINGDEVICE',\r\n  3171933400: 'IFCPLATE',\r\n  3221913625: 'IFCCOMMUNICATIONSAPPLIANCE',\r\n  3242481149: 'IFCDOORSTANDARDCASE',\r\n  3283111854: 'IFCRAMPFLIGHT',\r\n  3296154744: 'IFCCHIMNEY',\r\n  3304561284: 'IFCWINDOW',\r\n  3310460725: 'IFCELECTRICFLOWSTORAGEDEVICE',\r\n  3319311131: 'IFCHEATEXCHANGER',\r\n  3415622556: 'IFCFAN',\r\n  3420628829: 'IFCSOLARDEVICE',\r\n  3493046030: 'IFCGEOGRAPHICELEMENT',\r\n  3495092785: 'IFCCURTAINWALL',\r\n  3508470533: 'IFCFLOWTREATMENTDEVICE',\r\n  3512223829: 'IFCWALLSTANDARDCASE',\r\n  3518393246: 'IFCDUCTSEGMENT',\r\n  3571504051: 'IFCCOMPRESSOR',\r\n  3588315303: 'IFCOPENINGELEMENT',\r\n  3612865200: 'IFCPIPESEGMENT',\r\n  3640358203: 'IFCCOOLINGTOWER',\r\n  3651124850: 'IFCPROJECTIONELEMENT',\r\n  3694346114: 'IFCOUTLET',\r\n  3747195512: 'IFCEVAPORATIVECOOLER',\r\n  3758799889: 'IFCCABLECARRIERSEGMENT',\r\n  3824725483: 'IFCTENDON',\r\n  3825984169: 'IFCTRANSFORMER',\r\n  3902619387: 'IFCCHILLER',\r\n  4074379575: 'IFCDAMPER',\r\n  4086658281: 'IFCSENSOR',\r\n  4123344466: 'IFCELEMENTASSEMBLY',\r\n  4136498852: 'IFCCOOLEDBEAM',\r\n  4156078855: 'IFCWALLELEMENTEDCASE',\r\n  4175244083: 'IFCINTERCEPTOR',\r\n  4207607924: 'IFCVALVE',\r\n  4217484030: 'IFCCABLESEGMENT',\r\n  4237592921: 'IFCWASTETERMINAL',\r\n  4252922144: 'IFCSTAIRFLIGHT',\r\n  4278956645: 'IFCFLOWFITTING',\r\n  4288193352: 'IFCACTUATOR',\r\n  4292641817: 'IFCUNITARYEQUIPMENT',\r\n  3009204131: 'IFCGRID'\r\n};","import { BasePropertyManager } from './BasePropertyManager';\r\nimport { IFCPROJECT } from 'web-ifc';\r\nimport { pName } from '../../BaseDefinitions';\r\nimport { PropertyAPI } from './BaseDefinitions';\r\nimport { IfcElements } from '../IFCElementsMap';\r\n\r\nexport class WebIfcPropertyManager extends BasePropertyManager  implements PropertyAPI {\r\n    async getItemProperties(modelID: number, id: number, recursive = false) {\r\n        return this.state.api.GetLine(modelID, id, recursive);\r\n    }\r\n\r\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        const chunks = await this.getSpatialTreeChunks(modelID);\r\n        const allLines = await this.state.api.GetLineIDsWithType(modelID, IFCPROJECT);\r\n        const projectID = allLines.get(0);\r\n        const project = WebIfcPropertyManager.newIfcProject(projectID);\r\n        await this.getSpatialNode(modelID, project, chunks, includeProperties);\r\n        return project;\r\n    }\r\n\r\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        let items: number[] = [];\r\n        const lines = await this.state.api.GetLineIDsWithType(modelID, type);\r\n        for (let i = 0; i < lines.size(); i++) items.push(lines.get(i));\r\n        if (!verbose) return items;\r\n        const result: any[] = [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            result.push(await this.state.api.GetLine(modelID, items[i]));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    override async getProperty(modelID: number, elementID: number, recursive = false, propName: pName) {\r\n        const propSetIds = await this.getAllRelatedItemsOfType(modelID, elementID, propName);\r\n        const result: any[] = [];\r\n        for (let i = 0; i < propSetIds.length; i++) {\r\n            result.push(await this.state.api.GetLine(modelID, propSetIds[i], recursive));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected override getNodeType(modelID: number, id: number) {\r\n        const typeID = this.state.models[modelID].types[id];\r\n        return IfcElements[typeID];\r\n    }\r\n\r\n    protected override async getChunks(modelID: number, chunks: any, propNames: pName) {\r\n        const relation = await this.state.api.GetLineIDsWithType(modelID, propNames.name);\r\n        for (let i = 0; i < relation.size(); i++) {\r\n            const rel = await this.state.api.GetLine(modelID, relation.get(i), false);\r\n            this.saveChunk(chunks, propNames, rel);\r\n        }\r\n    }\r\n\r\n    private async getAllRelatedItemsOfType(modelID: number, id: number, propNames: pName) {\r\n        const lines = await this.state.api.GetLineIDsWithType(modelID, propNames.name);\r\n        const IDs: number[] = [];\r\n        for (let i = 0; i < lines.size(); i++) {\r\n            const rel = await this.state.api.GetLine(modelID, lines.get(i));\r\n            const isRelated = BasePropertyManager.isRelated(id, rel, propNames);\r\n            if (isRelated) this.getRelated(rel, propNames, IDs);\r\n        }\r\n        return IDs;\r\n    }\r\n}","export let IfcTypesMap:  {[key: number]: string} = {\r\n    3821786052: \"IFCACTIONREQUEST\",\r\n    2296667514: \"IFCACTOR\",\r\n    3630933823: \"IFCACTORROLE\",\r\n    4288193352: \"IFCACTUATOR\",\r\n    2874132201: \"IFCACTUATORTYPE\",\r\n    618182010: \"IFCADDRESS\",\r\n    1635779807: \"IFCADVANCEDBREP\",\r\n    2603310189: \"IFCADVANCEDBREPWITHVOIDS\",\r\n    3406155212: \"IFCADVANCEDFACE\",\r\n    1634111441: \"IFCAIRTERMINAL\",\r\n    177149247: \"IFCAIRTERMINALBOX\",\r\n    1411407467: \"IFCAIRTERMINALBOXTYPE\",\r\n    3352864051: \"IFCAIRTERMINALTYPE\",\r\n    2056796094: \"IFCAIRTOAIRHEATRECOVERY\",\r\n    1871374353: \"IFCAIRTOAIRHEATRECOVERYTYPE\",\r\n    3087945054: \"IFCALARM\",\r\n    3001207471: \"IFCALARMTYPE\",\r\n    325726236: \"IFCALIGNMENT\",\r\n    749761778: \"IFCALIGNMENT2DHORIZONTAL\",\r\n    3199563722: \"IFCALIGNMENT2DHORIZONTALSEGMENT\",\r\n    2483840362: \"IFCALIGNMENT2DSEGMENT\",\r\n    3379348081: \"IFCALIGNMENT2DVERSEGCIRCULARARC\",\r\n    3239324667: \"IFCALIGNMENT2DVERSEGLINE\",\r\n    4263986512: \"IFCALIGNMENT2DVERSEGPARABOLICARC\",\r\n    53199957: \"IFCALIGNMENT2DVERTICAL\",\r\n    2029264950: \"IFCALIGNMENT2DVERTICALSEGMENT\",\r\n    3512275521: \"IFCALIGNMENTCURVE\",\r\n    1674181508: \"IFCANNOTATION\",\r\n    669184980: \"IFCANNOTATIONFILLAREA\",\r\n    639542469: \"IFCAPPLICATION\",\r\n    411424972: \"IFCAPPLIEDVALUE\",\r\n    130549933: \"IFCAPPROVAL\",\r\n    3869604511: \"IFCAPPROVALRELATIONSHIP\",\r\n    3798115385: \"IFCARBITRARYCLOSEDPROFILEDEF\",\r\n    1310608509: \"IFCARBITRARYOPENPROFILEDEF\",\r\n    2705031697: \"IFCARBITRARYPROFILEDEFWITHVOIDS\",\r\n    3460190687: \"IFCASSET\",\r\n    3207858831: \"IFCASYMMETRICISHAPEPROFILEDEF\",\r\n    277319702: \"IFCAUDIOVISUALAPPLIANCE\",\r\n    1532957894: \"IFCAUDIOVISUALAPPLIANCETYPE\",\r\n    4261334040: \"IFCAXIS1PLACEMENT\",\r\n    3125803723: \"IFCAXIS2PLACEMENT2D\",\r\n    2740243338: \"IFCAXIS2PLACEMENT3D\",\r\n    1967976161: \"IFCBSPLINECURVE\",\r\n    2461110595: \"IFCBSPLINECURVEWITHKNOTS\",\r\n    2887950389: \"IFCBSPLINESURFACE\",\r\n    167062518: \"IFCBSPLINESURFACEWITHKNOTS\",\r\n    753842376: \"IFCBEAM\",\r\n    2906023776: \"IFCBEAMSTANDARDCASE\",\r\n    819618141: \"IFCBEAMTYPE\",\r\n    4196446775: \"IFCBEARING\",\r\n    3649138523: \"IFCBEARINGTYPE\",\r\n    616511568: \"IFCBLOBTEXTURE\",\r\n    1334484129: \"IFCBLOCK\",\r\n    32344328: \"IFCBOILER\",\r\n    231477066: \"IFCBOILERTYPE\",\r\n    3649129432: \"IFCBOOLEANCLIPPINGRESULT\",\r\n    2736907675: \"IFCBOOLEANRESULT\",\r\n    4037036970: \"IFCBOUNDARYCONDITION\",\r\n    1136057603: \"IFCBOUNDARYCURVE\",\r\n    1560379544: \"IFCBOUNDARYEDGECONDITION\",\r\n    3367102660: \"IFCBOUNDARYFACECONDITION\",\r\n    1387855156: \"IFCBOUNDARYNODECONDITION\",\r\n    2069777674: \"IFCBOUNDARYNODECONDITIONWARPING\",\r\n    1260505505: \"IFCBOUNDEDCURVE\",\r\n    4182860854: \"IFCBOUNDEDSURFACE\",\r\n    2581212453: \"IFCBOUNDINGBOX\",\r\n    2713105998: \"IFCBOXEDHALFSPACE\",\r\n    644574406: \"IFCBRIDGE\",\r\n    963979645: \"IFCBRIDGEPART\",\r\n    4031249490: \"IFCBUILDING\",\r\n    3299480353: \"IFCBUILDINGELEMENT\",\r\n    2979338954: \"IFCBUILDINGELEMENTPART\",\r\n    39481116: \"IFCBUILDINGELEMENTPARTTYPE\",\r\n    1095909175: \"IFCBUILDINGELEMENTPROXY\",\r\n    1909888760: \"IFCBUILDINGELEMENTPROXYTYPE\",\r\n    1950629157: \"IFCBUILDINGELEMENTTYPE\",\r\n    3124254112: \"IFCBUILDINGSTOREY\",\r\n    1177604601: \"IFCBUILDINGSYSTEM\",\r\n    2938176219: \"IFCBURNER\",\r\n    2188180465: \"IFCBURNERTYPE\",\r\n    2898889636: \"IFCCSHAPEPROFILEDEF\",\r\n    635142910: \"IFCCABLECARRIERFITTING\",\r\n    395041908: \"IFCCABLECARRIERFITTINGTYPE\",\r\n    3758799889: \"IFCCABLECARRIERSEGMENT\",\r\n    3293546465: \"IFCCABLECARRIERSEGMENTTYPE\",\r\n    1051757585: \"IFCCABLEFITTING\",\r\n    2674252688: \"IFCCABLEFITTINGTYPE\",\r\n    4217484030: \"IFCCABLESEGMENT\",\r\n    1285652485: \"IFCCABLESEGMENTTYPE\",\r\n    3999819293: \"IFCCAISSONFOUNDATION\",\r\n    3203706013: \"IFCCAISSONFOUNDATIONTYPE\",\r\n    1123145078: \"IFCCARTESIANPOINT\",\r\n    574549367: \"IFCCARTESIANPOINTLIST\",\r\n    1675464909: \"IFCCARTESIANPOINTLIST2D\",\r\n    2059837836: \"IFCCARTESIANPOINTLIST3D\",\r\n    59481748: \"IFCCARTESIANTRANSFORMATIONOPERATOR\",\r\n    3749851601: \"IFCCARTESIANTRANSFORMATIONOPERATOR2D\",\r\n    3486308946: \"IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM\",\r\n    3331915920: \"IFCCARTESIANTRANSFORMATIONOPERATOR3D\",\r\n    1416205885: \"IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM\",\r\n    3150382593: \"IFCCENTERLINEPROFILEDEF\",\r\n    3902619387: \"IFCCHILLER\",\r\n    2951183804: \"IFCCHILLERTYPE\",\r\n    3296154744: \"IFCCHIMNEY\",\r\n    2197970202: \"IFCCHIMNEYTYPE\",\r\n    2611217952: \"IFCCIRCLE\",\r\n    2937912522: \"IFCCIRCLEHOLLOWPROFILEDEF\",\r\n    1383045692: \"IFCCIRCLEPROFILEDEF\",\r\n    1062206242: \"IFCCIRCULARARCSEGMENT2D\",\r\n    1677625105: \"IFCCIVILELEMENT\",\r\n    3893394355: \"IFCCIVILELEMENTTYPE\",\r\n    747523909: \"IFCCLASSIFICATION\",\r\n    647927063: \"IFCCLASSIFICATIONREFERENCE\",\r\n    2205249479: \"IFCCLOSEDSHELL\",\r\n    639361253: \"IFCCOIL\",\r\n    2301859152: \"IFCCOILTYPE\",\r\n    776857604: \"IFCCOLOURRGB\",\r\n    3285139300: \"IFCCOLOURRGBLIST\",\r\n    3264961684: \"IFCCOLOURSPECIFICATION\",\r\n    843113511: \"IFCCOLUMN\",\r\n    905975707: \"IFCCOLUMNSTANDARDCASE\",\r\n    300633059: \"IFCCOLUMNTYPE\",\r\n    3221913625: \"IFCCOMMUNICATIONSAPPLIANCE\",\r\n    400855858: \"IFCCOMMUNICATIONSAPPLIANCETYPE\",\r\n    2542286263: \"IFCCOMPLEXPROPERTY\",\r\n    3875453745: \"IFCCOMPLEXPROPERTYTEMPLATE\",\r\n    3732776249: \"IFCCOMPOSITECURVE\",\r\n    15328376: \"IFCCOMPOSITECURVEONSURFACE\",\r\n    2485617015: \"IFCCOMPOSITECURVESEGMENT\",\r\n    1485152156: \"IFCCOMPOSITEPROFILEDEF\",\r\n    3571504051: \"IFCCOMPRESSOR\",\r\n    3850581409: \"IFCCOMPRESSORTYPE\",\r\n    2272882330: \"IFCCONDENSER\",\r\n    2816379211: \"IFCCONDENSERTYPE\",\r\n    2510884976: \"IFCCONIC\",\r\n    370225590: \"IFCCONNECTEDFACESET\",\r\n    1981873012: \"IFCCONNECTIONCURVEGEOMETRY\",\r\n    2859738748: \"IFCCONNECTIONGEOMETRY\",\r\n    45288368: \"IFCCONNECTIONPOINTECCENTRICITY\",\r\n    2614616156: \"IFCCONNECTIONPOINTGEOMETRY\",\r\n    2732653382: \"IFCCONNECTIONSURFACEGEOMETRY\",\r\n    775493141: \"IFCCONNECTIONVOLUMEGEOMETRY\",\r\n    1959218052: \"IFCCONSTRAINT\",\r\n    3898045240: \"IFCCONSTRUCTIONEQUIPMENTRESOURCE\",\r\n    2185764099: \"IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE\",\r\n    1060000209: \"IFCCONSTRUCTIONMATERIALRESOURCE\",\r\n    4105962743: \"IFCCONSTRUCTIONMATERIALRESOURCETYPE\",\r\n    488727124: \"IFCCONSTRUCTIONPRODUCTRESOURCE\",\r\n    1525564444: \"IFCCONSTRUCTIONPRODUCTRESOURCETYPE\",\r\n    2559216714: \"IFCCONSTRUCTIONRESOURCE\",\r\n    2574617495: \"IFCCONSTRUCTIONRESOURCETYPE\",\r\n    3419103109: \"IFCCONTEXT\",\r\n    3050246964: \"IFCCONTEXTDEPENDENTUNIT\",\r\n    3293443760: \"IFCCONTROL\",\r\n    25142252: \"IFCCONTROLLER\",\r\n    578613899: \"IFCCONTROLLERTYPE\",\r\n    2889183280: \"IFCCONVERSIONBASEDUNIT\",\r\n    2713554722: \"IFCCONVERSIONBASEDUNITWITHOFFSET\",\r\n    4136498852: \"IFCCOOLEDBEAM\",\r\n    335055490: \"IFCCOOLEDBEAMTYPE\",\r\n    3640358203: \"IFCCOOLINGTOWER\",\r\n    2954562838: \"IFCCOOLINGTOWERTYPE\",\r\n    1785450214: \"IFCCOORDINATEOPERATION\",\r\n    1466758467: \"IFCCOORDINATEREFERENCESYSTEM\",\r\n    3895139033: \"IFCCOSTITEM\",\r\n    1419761937: \"IFCCOSTSCHEDULE\",\r\n    602808272: \"IFCCOSTVALUE\",\r\n    1973544240: \"IFCCOVERING\",\r\n    1916426348: \"IFCCOVERINGTYPE\",\r\n    3295246426: \"IFCCREWRESOURCE\",\r\n    1815067380: \"IFCCREWRESOURCETYPE\",\r\n    2506170314: \"IFCCSGPRIMITIVE3D\",\r\n    2147822146: \"IFCCSGSOLID\",\r\n    539742890: \"IFCCURRENCYRELATIONSHIP\",\r\n    3495092785: \"IFCCURTAINWALL\",\r\n    1457835157: \"IFCCURTAINWALLTYPE\",\r\n    2601014836: \"IFCCURVE\",\r\n    2827736869: \"IFCCURVEBOUNDEDPLANE\",\r\n    2629017746: \"IFCCURVEBOUNDEDSURFACE\",\r\n    1186437898: \"IFCCURVESEGMENT2D\",\r\n    3800577675: \"IFCCURVESTYLE\",\r\n    1105321065: \"IFCCURVESTYLEFONT\",\r\n    2367409068: \"IFCCURVESTYLEFONTANDSCALING\",\r\n    3510044353: \"IFCCURVESTYLEFONTPATTERN\",\r\n    1213902940: \"IFCCYLINDRICALSURFACE\",\r\n    4074379575: \"IFCDAMPER\",\r\n    3961806047: \"IFCDAMPERTYPE\",\r\n    3426335179: \"IFCDEEPFOUNDATION\",\r\n    1306400036: \"IFCDEEPFOUNDATIONTYPE\",\r\n    3632507154: \"IFCDERIVEDPROFILEDEF\",\r\n    1765591967: \"IFCDERIVEDUNIT\",\r\n    1045800335: \"IFCDERIVEDUNITELEMENT\",\r\n    2949456006: \"IFCDIMENSIONALEXPONENTS\",\r\n    32440307: \"IFCDIRECTION\",\r\n    1335981549: \"IFCDISCRETEACCESSORY\",\r\n    2635815018: \"IFCDISCRETEACCESSORYTYPE\",\r\n    1945343521: \"IFCDISTANCEEXPRESSION\",\r\n    1052013943: \"IFCDISTRIBUTIONCHAMBERELEMENT\",\r\n    1599208980: \"IFCDISTRIBUTIONCHAMBERELEMENTTYPE\",\r\n    562808652: \"IFCDISTRIBUTIONCIRCUIT\",\r\n    1062813311: \"IFCDISTRIBUTIONCONTROLELEMENT\",\r\n    2063403501: \"IFCDISTRIBUTIONCONTROLELEMENTTYPE\",\r\n    1945004755: \"IFCDISTRIBUTIONELEMENT\",\r\n    3256556792: \"IFCDISTRIBUTIONELEMENTTYPE\",\r\n    3040386961: \"IFCDISTRIBUTIONFLOWELEMENT\",\r\n    3849074793: \"IFCDISTRIBUTIONFLOWELEMENTTYPE\",\r\n    3041715199: \"IFCDISTRIBUTIONPORT\",\r\n    3205830791: \"IFCDISTRIBUTIONSYSTEM\",\r\n    1154170062: \"IFCDOCUMENTINFORMATION\",\r\n    770865208: \"IFCDOCUMENTINFORMATIONRELATIONSHIP\",\r\n    3732053477: \"IFCDOCUMENTREFERENCE\",\r\n    395920057: \"IFCDOOR\",\r\n    2963535650: \"IFCDOORLININGPROPERTIES\",\r\n    1714330368: \"IFCDOORPANELPROPERTIES\",\r\n    3242481149: \"IFCDOORSTANDARDCASE\",\r\n    526551008: \"IFCDOORSTYLE\",\r\n    2323601079: \"IFCDOORTYPE\",\r\n    445594917: \"IFCDRAUGHTINGPREDEFINEDCOLOUR\",\r\n    4006246654: \"IFCDRAUGHTINGPREDEFINEDCURVEFONT\",\r\n    342316401: \"IFCDUCTFITTING\",\r\n    869906466: \"IFCDUCTFITTINGTYPE\",\r\n    3518393246: \"IFCDUCTSEGMENT\",\r\n    3760055223: \"IFCDUCTSEGMENTTYPE\",\r\n    1360408905: \"IFCDUCTSILENCER\",\r\n    2030761528: \"IFCDUCTSILENCERTYPE\",\r\n    3900360178: \"IFCEDGE\",\r\n    476780140: \"IFCEDGECURVE\",\r\n    1472233963: \"IFCEDGELOOP\",\r\n    1904799276: \"IFCELECTRICAPPLIANCE\",\r\n    663422040: \"IFCELECTRICAPPLIANCETYPE\",\r\n    862014818: \"IFCELECTRICDISTRIBUTIONBOARD\",\r\n    2417008758: \"IFCELECTRICDISTRIBUTIONBOARDTYPE\",\r\n    3310460725: \"IFCELECTRICFLOWSTORAGEDEVICE\",\r\n    3277789161: \"IFCELECTRICFLOWSTORAGEDEVICETYPE\",\r\n    264262732: \"IFCELECTRICGENERATOR\",\r\n    1534661035: \"IFCELECTRICGENERATORTYPE\",\r\n    402227799: \"IFCELECTRICMOTOR\",\r\n    1217240411: \"IFCELECTRICMOTORTYPE\",\r\n    1003880860: \"IFCELECTRICTIMECONTROL\",\r\n    712377611: \"IFCELECTRICTIMECONTROLTYPE\",\r\n    1758889154: \"IFCELEMENT\",\r\n    4123344466: \"IFCELEMENTASSEMBLY\",\r\n    2397081782: \"IFCELEMENTASSEMBLYTYPE\",\r\n    1623761950: \"IFCELEMENTCOMPONENT\",\r\n    2590856083: \"IFCELEMENTCOMPONENTTYPE\",\r\n    1883228015: \"IFCELEMENTQUANTITY\",\r\n    339256511: \"IFCELEMENTTYPE\",\r\n    2777663545: \"IFCELEMENTARYSURFACE\",\r\n    1704287377: \"IFCELLIPSE\",\r\n    2835456948: \"IFCELLIPSEPROFILEDEF\",\r\n    1658829314: \"IFCENERGYCONVERSIONDEVICE\",\r\n    2107101300: \"IFCENERGYCONVERSIONDEVICETYPE\",\r\n    2814081492: \"IFCENGINE\",\r\n    132023988: \"IFCENGINETYPE\",\r\n    3747195512: \"IFCEVAPORATIVECOOLER\",\r\n    3174744832: \"IFCEVAPORATIVECOOLERTYPE\",\r\n    484807127: \"IFCEVAPORATOR\",\r\n    3390157468: \"IFCEVAPORATORTYPE\",\r\n    4148101412: \"IFCEVENT\",\r\n    211053100: \"IFCEVENTTIME\",\r\n    4024345920: \"IFCEVENTTYPE\",\r\n    297599258: \"IFCEXTENDEDPROPERTIES\",\r\n    4294318154: \"IFCEXTERNALINFORMATION\",\r\n    3200245327: \"IFCEXTERNALREFERENCE\",\r\n    1437805879: \"IFCEXTERNALREFERENCERELATIONSHIP\",\r\n    1209101575: \"IFCEXTERNALSPATIALELEMENT\",\r\n    2853485674: \"IFCEXTERNALSPATIALSTRUCTUREELEMENT\",\r\n    2242383968: \"IFCEXTERNALLYDEFINEDHATCHSTYLE\",\r\n    1040185647: \"IFCEXTERNALLYDEFINEDSURFACESTYLE\",\r\n    3548104201: \"IFCEXTERNALLYDEFINEDTEXTFONT\",\r\n    477187591: \"IFCEXTRUDEDAREASOLID\",\r\n    2804161546: \"IFCEXTRUDEDAREASOLIDTAPERED\",\r\n    2556980723: \"IFCFACE\",\r\n    2047409740: \"IFCFACEBASEDSURFACEMODEL\",\r\n    1809719519: \"IFCFACEBOUND\",\r\n    803316827: \"IFCFACEOUTERBOUND\",\r\n    3008276851: \"IFCFACESURFACE\",\r\n    807026263: \"IFCFACETEDBREP\",\r\n    3737207727: \"IFCFACETEDBREPWITHVOIDS\",\r\n    24185140: \"IFCFACILITY\",\r\n    1310830890: \"IFCFACILITYPART\",\r\n    4219587988: \"IFCFAILURECONNECTIONCONDITION\",\r\n    3415622556: \"IFCFAN\",\r\n    346874300: \"IFCFANTYPE\",\r\n    647756555: \"IFCFASTENER\",\r\n    2489546625: \"IFCFASTENERTYPE\",\r\n    2827207264: \"IFCFEATUREELEMENT\",\r\n    2143335405: \"IFCFEATUREELEMENTADDITION\",\r\n    1287392070: \"IFCFEATUREELEMENTSUBTRACTION\",\r\n    738692330: \"IFCFILLAREASTYLE\",\r\n    374418227: \"IFCFILLAREASTYLEHATCHING\",\r\n    315944413: \"IFCFILLAREASTYLETILES\",\r\n    819412036: \"IFCFILTER\",\r\n    1810631287: \"IFCFILTERTYPE\",\r\n    1426591983: \"IFCFIRESUPPRESSIONTERMINAL\",\r\n    4222183408: \"IFCFIRESUPPRESSIONTERMINALTYPE\",\r\n    2652556860: \"IFCFIXEDREFERENCESWEPTAREASOLID\",\r\n    2058353004: \"IFCFLOWCONTROLLER\",\r\n    3907093117: \"IFCFLOWCONTROLLERTYPE\",\r\n    4278956645: \"IFCFLOWFITTING\",\r\n    3198132628: \"IFCFLOWFITTINGTYPE\",\r\n    182646315: \"IFCFLOWINSTRUMENT\",\r\n    4037862832: \"IFCFLOWINSTRUMENTTYPE\",\r\n    2188021234: \"IFCFLOWMETER\",\r\n    3815607619: \"IFCFLOWMETERTYPE\",\r\n    3132237377: \"IFCFLOWMOVINGDEVICE\",\r\n    1482959167: \"IFCFLOWMOVINGDEVICETYPE\",\r\n    987401354: \"IFCFLOWSEGMENT\",\r\n    1834744321: \"IFCFLOWSEGMENTTYPE\",\r\n    707683696: \"IFCFLOWSTORAGEDEVICE\",\r\n    1339347760: \"IFCFLOWSTORAGEDEVICETYPE\",\r\n    2223149337: \"IFCFLOWTERMINAL\",\r\n    2297155007: \"IFCFLOWTERMINALTYPE\",\r\n    3508470533: \"IFCFLOWTREATMENTDEVICE\",\r\n    3009222698: \"IFCFLOWTREATMENTDEVICETYPE\",\r\n    900683007: \"IFCFOOTING\",\r\n    1893162501: \"IFCFOOTINGTYPE\",\r\n    263784265: \"IFCFURNISHINGELEMENT\",\r\n    4238390223: \"IFCFURNISHINGELEMENTTYPE\",\r\n    1509553395: \"IFCFURNITURE\",\r\n    1268542332: \"IFCFURNITURETYPE\",\r\n    3493046030: \"IFCGEOGRAPHICELEMENT\",\r\n    4095422895: \"IFCGEOGRAPHICELEMENTTYPE\",\r\n    987898635: \"IFCGEOMETRICCURVESET\",\r\n    3448662350: \"IFCGEOMETRICREPRESENTATIONCONTEXT\",\r\n    2453401579: \"IFCGEOMETRICREPRESENTATIONITEM\",\r\n    4142052618: \"IFCGEOMETRICREPRESENTATIONSUBCONTEXT\",\r\n    3590301190: \"IFCGEOMETRICSET\",\r\n    3009204131: \"IFCGRID\",\r\n    852622518: \"IFCGRIDAXIS\",\r\n    178086475: \"IFCGRIDPLACEMENT\",\r\n    2706460486: \"IFCGROUP\",\r\n    812098782: \"IFCHALFSPACESOLID\",\r\n    3319311131: \"IFCHEATEXCHANGER\",\r\n    1251058090: \"IFCHEATEXCHANGERTYPE\",\r\n    2068733104: \"IFCHUMIDIFIER\",\r\n    1806887404: \"IFCHUMIDIFIERTYPE\",\r\n    1484403080: \"IFCISHAPEPROFILEDEF\",\r\n    3905492369: \"IFCIMAGETEXTURE\",\r\n    3570813810: \"IFCINDEXEDCOLOURMAP\",\r\n    2571569899: \"IFCINDEXEDPOLYCURVE\",\r\n    178912537: \"IFCINDEXEDPOLYGONALFACE\",\r\n    2294589976: \"IFCINDEXEDPOLYGONALFACEWITHVOIDS\",\r\n    1437953363: \"IFCINDEXEDTEXTUREMAP\",\r\n    2133299955: \"IFCINDEXEDTRIANGLETEXTUREMAP\",\r\n    4175244083: \"IFCINTERCEPTOR\",\r\n    3946677679: \"IFCINTERCEPTORTYPE\",\r\n    3113134337: \"IFCINTERSECTIONCURVE\",\r\n    2391368822: \"IFCINVENTORY\",\r\n    3741457305: \"IFCIRREGULARTIMESERIES\",\r\n    3020489413: \"IFCIRREGULARTIMESERIESVALUE\",\r\n    2176052936: \"IFCJUNCTIONBOX\",\r\n    4288270099: \"IFCJUNCTIONBOXTYPE\",\r\n    572779678: \"IFCLSHAPEPROFILEDEF\",\r\n    3827777499: \"IFCLABORRESOURCE\",\r\n    428585644: \"IFCLABORRESOURCETYPE\",\r\n    1585845231: \"IFCLAGTIME\",\r\n    76236018: \"IFCLAMP\",\r\n    1051575348: \"IFCLAMPTYPE\",\r\n    2655187982: \"IFCLIBRARYINFORMATION\",\r\n    3452421091: \"IFCLIBRARYREFERENCE\",\r\n    4162380809: \"IFCLIGHTDISTRIBUTIONDATA\",\r\n    629592764: \"IFCLIGHTFIXTURE\",\r\n    1161773419: \"IFCLIGHTFIXTURETYPE\",\r\n    1566485204: \"IFCLIGHTINTENSITYDISTRIBUTION\",\r\n    1402838566: \"IFCLIGHTSOURCE\",\r\n    125510826: \"IFCLIGHTSOURCEAMBIENT\",\r\n    2604431987: \"IFCLIGHTSOURCEDIRECTIONAL\",\r\n    4266656042: \"IFCLIGHTSOURCEGONIOMETRIC\",\r\n    1520743889: \"IFCLIGHTSOURCEPOSITIONAL\",\r\n    3422422726: \"IFCLIGHTSOURCESPOT\",\r\n    1281925730: \"IFCLINE\",\r\n    3092502836: \"IFCLINESEGMENT2D\",\r\n    388784114: \"IFCLINEARPLACEMENT\",\r\n    1154579445: \"IFCLINEARPOSITIONINGELEMENT\",\r\n    2624227202: \"IFCLOCALPLACEMENT\",\r\n    1008929658: \"IFCLOOP\",\r\n    1425443689: \"IFCMANIFOLDSOLIDBREP\",\r\n    3057273783: \"IFCMAPCONVERSION\",\r\n    2347385850: \"IFCMAPPEDITEM\",\r\n    1838606355: \"IFCMATERIAL\",\r\n    1847130766: \"IFCMATERIALCLASSIFICATIONRELATIONSHIP\",\r\n    3708119000: \"IFCMATERIALCONSTITUENT\",\r\n    2852063980: \"IFCMATERIALCONSTITUENTSET\",\r\n    760658860: \"IFCMATERIALDEFINITION\",\r\n    2022407955: \"IFCMATERIALDEFINITIONREPRESENTATION\",\r\n    248100487: \"IFCMATERIALLAYER\",\r\n    3303938423: \"IFCMATERIALLAYERSET\",\r\n    1303795690: \"IFCMATERIALLAYERSETUSAGE\",\r\n    1847252529: \"IFCMATERIALLAYERWITHOFFSETS\",\r\n    2199411900: \"IFCMATERIALLIST\",\r\n    2235152071: \"IFCMATERIALPROFILE\",\r\n    164193824: \"IFCMATERIALPROFILESET\",\r\n    3079605661: \"IFCMATERIALPROFILESETUSAGE\",\r\n    3404854881: \"IFCMATERIALPROFILESETUSAGETAPERING\",\r\n    552965576: \"IFCMATERIALPROFILEWITHOFFSETS\",\r\n    3265635763: \"IFCMATERIALPROPERTIES\",\r\n    853536259: \"IFCMATERIALRELATIONSHIP\",\r\n    1507914824: \"IFCMATERIALUSAGEDEFINITION\",\r\n    2597039031: \"IFCMEASUREWITHUNIT\",\r\n    377706215: \"IFCMECHANICALFASTENER\",\r\n    2108223431: \"IFCMECHANICALFASTENERTYPE\",\r\n    1437502449: \"IFCMEDICALDEVICE\",\r\n    1114901282: \"IFCMEDICALDEVICETYPE\",\r\n    1073191201: \"IFCMEMBER\",\r\n    1911478936: \"IFCMEMBERSTANDARDCASE\",\r\n    3181161470: \"IFCMEMBERTYPE\",\r\n    3368373690: \"IFCMETRIC\",\r\n    2998442950: \"IFCMIRROREDPROFILEDEF\",\r\n    2706619895: \"IFCMONETARYUNIT\",\r\n    2474470126: \"IFCMOTORCONNECTION\",\r\n    977012517: \"IFCMOTORCONNECTIONTYPE\",\r\n    1918398963: \"IFCNAMEDUNIT\",\r\n    3888040117: \"IFCOBJECT\",\r\n    219451334: \"IFCOBJECTDEFINITION\",\r\n    3701648758: \"IFCOBJECTPLACEMENT\",\r\n    2251480897: \"IFCOBJECTIVE\",\r\n    4143007308: \"IFCOCCUPANT\",\r\n    590820931: \"IFCOFFSETCURVE\",\r\n    3388369263: \"IFCOFFSETCURVE2D\",\r\n    3505215534: \"IFCOFFSETCURVE3D\",\r\n    2485787929: \"IFCOFFSETCURVEBYDISTANCES\",\r\n    2665983363: \"IFCOPENSHELL\",\r\n    3588315303: \"IFCOPENINGELEMENT\",\r\n    3079942009: \"IFCOPENINGSTANDARDCASE\",\r\n    4251960020: \"IFCORGANIZATION\",\r\n    1411181986: \"IFCORGANIZATIONRELATIONSHIP\",\r\n    643959842: \"IFCORIENTATIONEXPRESSION\",\r\n    1029017970: \"IFCORIENTEDEDGE\",\r\n    144952367: \"IFCOUTERBOUNDARYCURVE\",\r\n    3694346114: \"IFCOUTLET\",\r\n    2837617999: \"IFCOUTLETTYPE\",\r\n    1207048766: \"IFCOWNERHISTORY\",\r\n    2529465313: \"IFCPARAMETERIZEDPROFILEDEF\",\r\n    2519244187: \"IFCPATH\",\r\n    1682466193: \"IFCPCURVE\",\r\n    2382730787: \"IFCPERFORMANCEHISTORY\",\r\n    3566463478: \"IFCPERMEABLECOVERINGPROPERTIES\",\r\n    3327091369: \"IFCPERMIT\",\r\n    2077209135: \"IFCPERSON\",\r\n    101040310: \"IFCPERSONANDORGANIZATION\",\r\n    3021840470: \"IFCPHYSICALCOMPLEXQUANTITY\",\r\n    2483315170: \"IFCPHYSICALQUANTITY\",\r\n    2226359599: \"IFCPHYSICALSIMPLEQUANTITY\",\r\n    1687234759: \"IFCPILE\",\r\n    1158309216: \"IFCPILETYPE\",\r\n    310824031: \"IFCPIPEFITTING\",\r\n    804291784: \"IFCPIPEFITTINGTYPE\",\r\n    3612865200: \"IFCPIPESEGMENT\",\r\n    4231323485: \"IFCPIPESEGMENTTYPE\",\r\n    597895409: \"IFCPIXELTEXTURE\",\r\n    2004835150: \"IFCPLACEMENT\",\r\n    603570806: \"IFCPLANARBOX\",\r\n    1663979128: \"IFCPLANAREXTENT\",\r\n    220341763: \"IFCPLANE\",\r\n    3171933400: \"IFCPLATE\",\r\n    1156407060: \"IFCPLATESTANDARDCASE\",\r\n    4017108033: \"IFCPLATETYPE\",\r\n    2067069095: \"IFCPOINT\",\r\n    4022376103: \"IFCPOINTONCURVE\",\r\n    1423911732: \"IFCPOINTONSURFACE\",\r\n    2924175390: \"IFCPOLYLOOP\",\r\n    2775532180: \"IFCPOLYGONALBOUNDEDHALFSPACE\",\r\n    2839578677: \"IFCPOLYGONALFACESET\",\r\n    3724593414: \"IFCPOLYLINE\",\r\n    3740093272: \"IFCPORT\",\r\n    1946335990: \"IFCPOSITIONINGELEMENT\",\r\n    3355820592: \"IFCPOSTALADDRESS\",\r\n    759155922: \"IFCPREDEFINEDCOLOUR\",\r\n    2559016684: \"IFCPREDEFINEDCURVEFONT\",\r\n    3727388367: \"IFCPREDEFINEDITEM\",\r\n    3778827333: \"IFCPREDEFINEDPROPERTIES\",\r\n    3967405729: \"IFCPREDEFINEDPROPERTYSET\",\r\n    1775413392: \"IFCPREDEFINEDTEXTFONT\",\r\n    677532197: \"IFCPRESENTATIONITEM\",\r\n    2022622350: \"IFCPRESENTATIONLAYERASSIGNMENT\",\r\n    1304840413: \"IFCPRESENTATIONLAYERWITHSTYLE\",\r\n    3119450353: \"IFCPRESENTATIONSTYLE\",\r\n    2417041796: \"IFCPRESENTATIONSTYLEASSIGNMENT\",\r\n    2744685151: \"IFCPROCEDURE\",\r\n    569719735: \"IFCPROCEDURETYPE\",\r\n    2945172077: \"IFCPROCESS\",\r\n    4208778838: \"IFCPRODUCT\",\r\n    673634403: \"IFCPRODUCTDEFINITIONSHAPE\",\r\n    2095639259: \"IFCPRODUCTREPRESENTATION\",\r\n    3958567839: \"IFCPROFILEDEF\",\r\n    2802850158: \"IFCPROFILEPROPERTIES\",\r\n    103090709: \"IFCPROJECT\",\r\n    653396225: \"IFCPROJECTLIBRARY\",\r\n    2904328755: \"IFCPROJECTORDER\",\r\n    3843373140: \"IFCPROJECTEDCRS\",\r\n    3651124850: \"IFCPROJECTIONELEMENT\",\r\n    2598011224: \"IFCPROPERTY\",\r\n    986844984: \"IFCPROPERTYABSTRACTION\",\r\n    871118103: \"IFCPROPERTYBOUNDEDVALUE\",\r\n    1680319473: \"IFCPROPERTYDEFINITION\",\r\n    148025276: \"IFCPROPERTYDEPENDENCYRELATIONSHIP\",\r\n    4166981789: \"IFCPROPERTYENUMERATEDVALUE\",\r\n    3710013099: \"IFCPROPERTYENUMERATION\",\r\n    2752243245: \"IFCPROPERTYLISTVALUE\",\r\n    941946838: \"IFCPROPERTYREFERENCEVALUE\",\r\n    1451395588: \"IFCPROPERTYSET\",\r\n    3357820518: \"IFCPROPERTYSETDEFINITION\",\r\n    492091185: \"IFCPROPERTYSETTEMPLATE\",\r\n    3650150729: \"IFCPROPERTYSINGLEVALUE\",\r\n    110355661: \"IFCPROPERTYTABLEVALUE\",\r\n    3521284610: \"IFCPROPERTYTEMPLATE\",\r\n    1482703590: \"IFCPROPERTYTEMPLATEDEFINITION\",\r\n    738039164: \"IFCPROTECTIVEDEVICE\",\r\n    2295281155: \"IFCPROTECTIVEDEVICETRIPPINGUNIT\",\r\n    655969474: \"IFCPROTECTIVEDEVICETRIPPINGUNITTYPE\",\r\n    1842657554: \"IFCPROTECTIVEDEVICETYPE\",\r\n    3219374653: \"IFCPROXY\",\r\n    90941305: \"IFCPUMP\",\r\n    2250791053: \"IFCPUMPTYPE\",\r\n    2044713172: \"IFCQUANTITYAREA\",\r\n    2093928680: \"IFCQUANTITYCOUNT\",\r\n    931644368: \"IFCQUANTITYLENGTH\",\r\n    2090586900: \"IFCQUANTITYSET\",\r\n    3252649465: \"IFCQUANTITYTIME\",\r\n    2405470396: \"IFCQUANTITYVOLUME\",\r\n    825690147: \"IFCQUANTITYWEIGHT\",\r\n    2262370178: \"IFCRAILING\",\r\n    2893384427: \"IFCRAILINGTYPE\",\r\n    3024970846: \"IFCRAMP\",\r\n    3283111854: \"IFCRAMPFLIGHT\",\r\n    2324767716: \"IFCRAMPFLIGHTTYPE\",\r\n    1469900589: \"IFCRAMPTYPE\",\r\n    1232101972: \"IFCRATIONALBSPLINECURVEWITHKNOTS\",\r\n    683857671: \"IFCRATIONALBSPLINESURFACEWITHKNOTS\",\r\n    2770003689: \"IFCRECTANGLEHOLLOWPROFILEDEF\",\r\n    3615266464: \"IFCRECTANGLEPROFILEDEF\",\r\n    2798486643: \"IFCRECTANGULARPYRAMID\",\r\n    3454111270: \"IFCRECTANGULARTRIMMEDSURFACE\",\r\n    3915482550: \"IFCRECURRENCEPATTERN\",\r\n    2433181523: \"IFCREFERENCE\",\r\n    4021432810: \"IFCREFERENT\",\r\n    3413951693: \"IFCREGULARTIMESERIES\",\r\n    1580146022: \"IFCREINFORCEMENTBARPROPERTIES\",\r\n    3765753017: \"IFCREINFORCEMENTDEFINITIONPROPERTIES\",\r\n    979691226: \"IFCREINFORCINGBAR\",\r\n    2572171363: \"IFCREINFORCINGBARTYPE\",\r\n    3027567501: \"IFCREINFORCINGELEMENT\",\r\n    964333572: \"IFCREINFORCINGELEMENTTYPE\",\r\n    2320036040: \"IFCREINFORCINGMESH\",\r\n    2310774935: \"IFCREINFORCINGMESHTYPE\",\r\n    160246688: \"IFCRELAGGREGATES\",\r\n    3939117080: \"IFCRELASSIGNS\",\r\n    1683148259: \"IFCRELASSIGNSTOACTOR\",\r\n    2495723537: \"IFCRELASSIGNSTOCONTROL\",\r\n    1307041759: \"IFCRELASSIGNSTOGROUP\",\r\n    1027710054: \"IFCRELASSIGNSTOGROUPBYFACTOR\",\r\n    4278684876: \"IFCRELASSIGNSTOPROCESS\",\r\n    2857406711: \"IFCRELASSIGNSTOPRODUCT\",\r\n    205026976: \"IFCRELASSIGNSTORESOURCE\",\r\n    1865459582: \"IFCRELASSOCIATES\",\r\n    4095574036: \"IFCRELASSOCIATESAPPROVAL\",\r\n    919958153: \"IFCRELASSOCIATESCLASSIFICATION\",\r\n    2728634034: \"IFCRELASSOCIATESCONSTRAINT\",\r\n    982818633: \"IFCRELASSOCIATESDOCUMENT\",\r\n    3840914261: \"IFCRELASSOCIATESLIBRARY\",\r\n    2655215786: \"IFCRELASSOCIATESMATERIAL\",\r\n    826625072: \"IFCRELCONNECTS\",\r\n    1204542856: \"IFCRELCONNECTSELEMENTS\",\r\n    3945020480: \"IFCRELCONNECTSPATHELEMENTS\",\r\n    4201705270: \"IFCRELCONNECTSPORTTOELEMENT\",\r\n    3190031847: \"IFCRELCONNECTSPORTS\",\r\n    2127690289: \"IFCRELCONNECTSSTRUCTURALACTIVITY\",\r\n    1638771189: \"IFCRELCONNECTSSTRUCTURALMEMBER\",\r\n    504942748: \"IFCRELCONNECTSWITHECCENTRICITY\",\r\n    3678494232: \"IFCRELCONNECTSWITHREALIZINGELEMENTS\",\r\n    3242617779: \"IFCRELCONTAINEDINSPATIALSTRUCTURE\",\r\n    886880790: \"IFCRELCOVERSBLDGELEMENTS\",\r\n    2802773753: \"IFCRELCOVERSSPACES\",\r\n    2565941209: \"IFCRELDECLARES\",\r\n    2551354335: \"IFCRELDECOMPOSES\",\r\n    693640335: \"IFCRELDEFINES\",\r\n    1462361463: \"IFCRELDEFINESBYOBJECT\",\r\n    4186316022: \"IFCRELDEFINESBYPROPERTIES\",\r\n    307848117: \"IFCRELDEFINESBYTEMPLATE\",\r\n    781010003: \"IFCRELDEFINESBYTYPE\",\r\n    3940055652: \"IFCRELFILLSELEMENT\",\r\n    279856033: \"IFCRELFLOWCONTROLELEMENTS\",\r\n    427948657: \"IFCRELINTERFERESELEMENTS\",\r\n    3268803585: \"IFCRELNESTS\",\r\n    1441486842: \"IFCRELPOSITIONS\",\r\n    750771296: \"IFCRELPROJECTSELEMENT\",\r\n    1245217292: \"IFCRELREFERENCEDINSPATIALSTRUCTURE\",\r\n    4122056220: \"IFCRELSEQUENCE\",\r\n    366585022: \"IFCRELSERVICESBUILDINGS\",\r\n    3451746338: \"IFCRELSPACEBOUNDARY\",\r\n    3523091289: \"IFCRELSPACEBOUNDARY1STLEVEL\",\r\n    1521410863: \"IFCRELSPACEBOUNDARY2NDLEVEL\",\r\n    1401173127: \"IFCRELVOIDSELEMENT\",\r\n    478536968: \"IFCRELATIONSHIP\",\r\n    816062949: \"IFCREPARAMETRISEDCOMPOSITECURVESEGMENT\",\r\n    1076942058: \"IFCREPRESENTATION\",\r\n    3377609919: \"IFCREPRESENTATIONCONTEXT\",\r\n    3008791417: \"IFCREPRESENTATIONITEM\",\r\n    1660063152: \"IFCREPRESENTATIONMAP\",\r\n    2914609552: \"IFCRESOURCE\",\r\n    2943643501: \"IFCRESOURCEAPPROVALRELATIONSHIP\",\r\n    1608871552: \"IFCRESOURCECONSTRAINTRELATIONSHIP\",\r\n    2439245199: \"IFCRESOURCELEVELRELATIONSHIP\",\r\n    1042787934: \"IFCRESOURCETIME\",\r\n    1856042241: \"IFCREVOLVEDAREASOLID\",\r\n    3243963512: \"IFCREVOLVEDAREASOLIDTAPERED\",\r\n    4158566097: \"IFCRIGHTCIRCULARCONE\",\r\n    3626867408: \"IFCRIGHTCIRCULARCYLINDER\",\r\n    2016517767: \"IFCROOF\",\r\n    2781568857: \"IFCROOFTYPE\",\r\n    2341007311: \"IFCROOT\",\r\n    2778083089: \"IFCROUNDEDRECTANGLEPROFILEDEF\",\r\n    448429030: \"IFCSIUNIT\",\r\n    3053780830: \"IFCSANITARYTERMINAL\",\r\n    1768891740: \"IFCSANITARYTERMINALTYPE\",\r\n    1054537805: \"IFCSCHEDULINGTIME\",\r\n    2157484638: \"IFCSEAMCURVE\",\r\n    2042790032: \"IFCSECTIONPROPERTIES\",\r\n    4165799628: \"IFCSECTIONREINFORCEMENTPROPERTIES\",\r\n    1862484736: \"IFCSECTIONEDSOLID\",\r\n    1290935644: \"IFCSECTIONEDSOLIDHORIZONTAL\",\r\n    1509187699: \"IFCSECTIONEDSPINE\",\r\n    4086658281: \"IFCSENSOR\",\r\n    1783015770: \"IFCSENSORTYPE\",\r\n    1329646415: \"IFCSHADINGDEVICE\",\r\n    4074543187: \"IFCSHADINGDEVICETYPE\",\r\n    867548509: \"IFCSHAPEASPECT\",\r\n    3982875396: \"IFCSHAPEMODEL\",\r\n    4240577450: \"IFCSHAPEREPRESENTATION\",\r\n    4124623270: \"IFCSHELLBASEDSURFACEMODEL\",\r\n    3692461612: \"IFCSIMPLEPROPERTY\",\r\n    3663146110: \"IFCSIMPLEPROPERTYTEMPLATE\",\r\n    4097777520: \"IFCSITE\",\r\n    1529196076: \"IFCSLAB\",\r\n    3127900445: \"IFCSLABELEMENTEDCASE\",\r\n    3027962421: \"IFCSLABSTANDARDCASE\",\r\n    2533589738: \"IFCSLABTYPE\",\r\n    2609359061: \"IFCSLIPPAGECONNECTIONCONDITION\",\r\n    3420628829: \"IFCSOLARDEVICE\",\r\n    1072016465: \"IFCSOLARDEVICETYPE\",\r\n    723233188: \"IFCSOLIDMODEL\",\r\n    3856911033: \"IFCSPACE\",\r\n    1999602285: \"IFCSPACEHEATER\",\r\n    1305183839: \"IFCSPACEHEATERTYPE\",\r\n    3812236995: \"IFCSPACETYPE\",\r\n    1412071761: \"IFCSPATIALELEMENT\",\r\n    710998568: \"IFCSPATIALELEMENTTYPE\",\r\n    2706606064: \"IFCSPATIALSTRUCTUREELEMENT\",\r\n    3893378262: \"IFCSPATIALSTRUCTUREELEMENTTYPE\",\r\n    463610769: \"IFCSPATIALZONE\",\r\n    2481509218: \"IFCSPATIALZONETYPE\",\r\n    451544542: \"IFCSPHERE\",\r\n    4015995234: \"IFCSPHERICALSURFACE\",\r\n    1404847402: \"IFCSTACKTERMINAL\",\r\n    3112655638: \"IFCSTACKTERMINALTYPE\",\r\n    331165859: \"IFCSTAIR\",\r\n    4252922144: \"IFCSTAIRFLIGHT\",\r\n    1039846685: \"IFCSTAIRFLIGHTTYPE\",\r\n    338393293: \"IFCSTAIRTYPE\",\r\n    682877961: \"IFCSTRUCTURALACTION\",\r\n    3544373492: \"IFCSTRUCTURALACTIVITY\",\r\n    2515109513: \"IFCSTRUCTURALANALYSISMODEL\",\r\n    1179482911: \"IFCSTRUCTURALCONNECTION\",\r\n    2273995522: \"IFCSTRUCTURALCONNECTIONCONDITION\",\r\n    1004757350: \"IFCSTRUCTURALCURVEACTION\",\r\n    4243806635: \"IFCSTRUCTURALCURVECONNECTION\",\r\n    214636428: \"IFCSTRUCTURALCURVEMEMBER\",\r\n    2445595289: \"IFCSTRUCTURALCURVEMEMBERVARYING\",\r\n    2757150158: \"IFCSTRUCTURALCURVEREACTION\",\r\n    3136571912: \"IFCSTRUCTURALITEM\",\r\n    1807405624: \"IFCSTRUCTURALLINEARACTION\",\r\n    2162789131: \"IFCSTRUCTURALLOAD\",\r\n    385403989: \"IFCSTRUCTURALLOADCASE\",\r\n    3478079324: \"IFCSTRUCTURALLOADCONFIGURATION\",\r\n    1252848954: \"IFCSTRUCTURALLOADGROUP\",\r\n    1595516126: \"IFCSTRUCTURALLOADLINEARFORCE\",\r\n    609421318: \"IFCSTRUCTURALLOADORRESULT\",\r\n    2668620305: \"IFCSTRUCTURALLOADPLANARFORCE\",\r\n    2473145415: \"IFCSTRUCTURALLOADSINGLEDISPLACEMENT\",\r\n    1973038258: \"IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION\",\r\n    1597423693: \"IFCSTRUCTURALLOADSINGLEFORCE\",\r\n    1190533807: \"IFCSTRUCTURALLOADSINGLEFORCEWARPING\",\r\n    2525727697: \"IFCSTRUCTURALLOADSTATIC\",\r\n    3408363356: \"IFCSTRUCTURALLOADTEMPERATURE\",\r\n    530289379: \"IFCSTRUCTURALMEMBER\",\r\n    1621171031: \"IFCSTRUCTURALPLANARACTION\",\r\n    2082059205: \"IFCSTRUCTURALPOINTACTION\",\r\n    734778138: \"IFCSTRUCTURALPOINTCONNECTION\",\r\n    1235345126: \"IFCSTRUCTURALPOINTREACTION\",\r\n    3689010777: \"IFCSTRUCTURALREACTION\",\r\n    2986769608: \"IFCSTRUCTURALRESULTGROUP\",\r\n    3657597509: \"IFCSTRUCTURALSURFACEACTION\",\r\n    1975003073: \"IFCSTRUCTURALSURFACECONNECTION\",\r\n    3979015343: \"IFCSTRUCTURALSURFACEMEMBER\",\r\n    2218152070: \"IFCSTRUCTURALSURFACEMEMBERVARYING\",\r\n    603775116: \"IFCSTRUCTURALSURFACEREACTION\",\r\n    2830218821: \"IFCSTYLEMODEL\",\r\n    3958052878: \"IFCSTYLEDITEM\",\r\n    3049322572: \"IFCSTYLEDREPRESENTATION\",\r\n    148013059: \"IFCSUBCONTRACTRESOURCE\",\r\n    4095615324: \"IFCSUBCONTRACTRESOURCETYPE\",\r\n    2233826070: \"IFCSUBEDGE\",\r\n    2513912981: \"IFCSURFACE\",\r\n    699246055: \"IFCSURFACECURVE\",\r\n    2028607225: \"IFCSURFACECURVESWEPTAREASOLID\",\r\n    3101698114: \"IFCSURFACEFEATURE\",\r\n    2809605785: \"IFCSURFACEOFLINEAREXTRUSION\",\r\n    4124788165: \"IFCSURFACEOFREVOLUTION\",\r\n    2934153892: \"IFCSURFACEREINFORCEMENTAREA\",\r\n    1300840506: \"IFCSURFACESTYLE\",\r\n    3303107099: \"IFCSURFACESTYLELIGHTING\",\r\n    1607154358: \"IFCSURFACESTYLEREFRACTION\",\r\n    1878645084: \"IFCSURFACESTYLERENDERING\",\r\n    846575682: \"IFCSURFACESTYLESHADING\",\r\n    1351298697: \"IFCSURFACESTYLEWITHTEXTURES\",\r\n    626085974: \"IFCSURFACETEXTURE\",\r\n    2247615214: \"IFCSWEPTAREASOLID\",\r\n    1260650574: \"IFCSWEPTDISKSOLID\",\r\n    1096409881: \"IFCSWEPTDISKSOLIDPOLYGONAL\",\r\n    230924584: \"IFCSWEPTSURFACE\",\r\n    1162798199: \"IFCSWITCHINGDEVICE\",\r\n    2315554128: \"IFCSWITCHINGDEVICETYPE\",\r\n    2254336722: \"IFCSYSTEM\",\r\n    413509423: \"IFCSYSTEMFURNITUREELEMENT\",\r\n    1580310250: \"IFCSYSTEMFURNITUREELEMENTTYPE\",\r\n    3071757647: \"IFCTSHAPEPROFILEDEF\",\r\n    985171141: \"IFCTABLE\",\r\n    2043862942: \"IFCTABLECOLUMN\",\r\n    531007025: \"IFCTABLEROW\",\r\n    812556717: \"IFCTANK\",\r\n    5716631: \"IFCTANKTYPE\",\r\n    3473067441: \"IFCTASK\",\r\n    1549132990: \"IFCTASKTIME\",\r\n    2771591690: \"IFCTASKTIMERECURRING\",\r\n    3206491090: \"IFCTASKTYPE\",\r\n    912023232: \"IFCTELECOMADDRESS\",\r\n    3824725483: \"IFCTENDON\",\r\n    2347447852: \"IFCTENDONANCHOR\",\r\n    3081323446: \"IFCTENDONANCHORTYPE\",\r\n    3663046924: \"IFCTENDONCONDUIT\",\r\n    2281632017: \"IFCTENDONCONDUITTYPE\",\r\n    2415094496: \"IFCTENDONTYPE\",\r\n    2387106220: \"IFCTESSELLATEDFACESET\",\r\n    901063453: \"IFCTESSELLATEDITEM\",\r\n    4282788508: \"IFCTEXTLITERAL\",\r\n    3124975700: \"IFCTEXTLITERALWITHEXTENT\",\r\n    1447204868: \"IFCTEXTSTYLE\",\r\n    1983826977: \"IFCTEXTSTYLEFONTMODEL\",\r\n    2636378356: \"IFCTEXTSTYLEFORDEFINEDFONT\",\r\n    1640371178: \"IFCTEXTSTYLETEXTMODEL\",\r\n    280115917: \"IFCTEXTURECOORDINATE\",\r\n    1742049831: \"IFCTEXTURECOORDINATEGENERATOR\",\r\n    2552916305: \"IFCTEXTUREMAP\",\r\n    1210645708: \"IFCTEXTUREVERTEX\",\r\n    3611470254: \"IFCTEXTUREVERTEXLIST\",\r\n    1199560280: \"IFCTIMEPERIOD\",\r\n    3101149627: \"IFCTIMESERIES\",\r\n    581633288: \"IFCTIMESERIESVALUE\",\r\n    1377556343: \"IFCTOPOLOGICALREPRESENTATIONITEM\",\r\n    1735638870: \"IFCTOPOLOGYREPRESENTATION\",\r\n    1935646853: \"IFCTOROIDALSURFACE\",\r\n    3825984169: \"IFCTRANSFORMER\",\r\n    1692211062: \"IFCTRANSFORMERTYPE\",\r\n    2595432518: \"IFCTRANSITIONCURVESEGMENT2D\",\r\n    1620046519: \"IFCTRANSPORTELEMENT\",\r\n    2097647324: \"IFCTRANSPORTELEMENTTYPE\",\r\n    2715220739: \"IFCTRAPEZIUMPROFILEDEF\",\r\n    2916149573: \"IFCTRIANGULATEDFACESET\",\r\n    1229763772: \"IFCTRIANGULATEDIRREGULARNETWORK\",\r\n    3593883385: \"IFCTRIMMEDCURVE\",\r\n    3026737570: \"IFCTUBEBUNDLE\",\r\n    1600972822: \"IFCTUBEBUNDLETYPE\",\r\n    1628702193: \"IFCTYPEOBJECT\",\r\n    3736923433: \"IFCTYPEPROCESS\",\r\n    2347495698: \"IFCTYPEPRODUCT\",\r\n    3698973494: \"IFCTYPERESOURCE\",\r\n    427810014: \"IFCUSHAPEPROFILEDEF\",\r\n    180925521: \"IFCUNITASSIGNMENT\",\r\n    630975310: \"IFCUNITARYCONTROLELEMENT\",\r\n    3179687236: \"IFCUNITARYCONTROLELEMENTTYPE\",\r\n    4292641817: \"IFCUNITARYEQUIPMENT\",\r\n    1911125066: \"IFCUNITARYEQUIPMENTTYPE\",\r\n    4207607924: \"IFCVALVE\",\r\n    728799441: \"IFCVALVETYPE\",\r\n    1417489154: \"IFCVECTOR\",\r\n    2799835756: \"IFCVERTEX\",\r\n    2759199220: \"IFCVERTEXLOOP\",\r\n    1907098498: \"IFCVERTEXPOINT\",\r\n    1530820697: \"IFCVIBRATIONDAMPER\",\r\n    3956297820: \"IFCVIBRATIONDAMPERTYPE\",\r\n    2391383451: \"IFCVIBRATIONISOLATOR\",\r\n    3313531582: \"IFCVIBRATIONISOLATORTYPE\",\r\n    2769231204: \"IFCVIRTUALELEMENT\",\r\n    891718957: \"IFCVIRTUALGRIDINTERSECTION\",\r\n    926996030: \"IFCVOIDINGFEATURE\",\r\n    2391406946: \"IFCWALL\",\r\n    4156078855: \"IFCWALLELEMENTEDCASE\",\r\n    3512223829: \"IFCWALLSTANDARDCASE\",\r\n    1898987631: \"IFCWALLTYPE\",\r\n    4237592921: \"IFCWASTETERMINAL\",\r\n    1133259667: \"IFCWASTETERMINALTYPE\",\r\n    3304561284: \"IFCWINDOW\",\r\n    336235671: \"IFCWINDOWLININGPROPERTIES\",\r\n    512836454: \"IFCWINDOWPANELPROPERTIES\",\r\n    486154966: \"IFCWINDOWSTANDARDCASE\",\r\n    1299126871: \"IFCWINDOWSTYLE\",\r\n    4009809668: \"IFCWINDOWTYPE\",\r\n    4088093105: \"IFCWORKCALENDAR\",\r\n    1028945134: \"IFCWORKCONTROL\",\r\n    4218914973: \"IFCWORKPLAN\",\r\n    3342526732: \"IFCWORKSCHEDULE\",\r\n    1236880293: \"IFCWORKTIME\",\r\n    2543172580: \"IFCZSHAPEPROFILEDEF\",\r\n    1033361043: \"IFCZONE\",\r\n}","import { IfcTypesMap } from '../IfcTypesMap';\r\nimport { JSONObject, pName } from '../../BaseDefinitions';\r\nimport { BasePropertyManager } from './BasePropertyManager';\r\nimport { IFCPROJECT } from 'web-ifc';\r\nimport { PropertyAPI } from './BaseDefinitions';\r\n\r\nexport class JSONPropertyManager extends BasePropertyManager implements PropertyAPI {\r\n\r\n    async getItemProperties(modelID: number, id: number, recursive = false) {\r\n        return { ...this.state.models[modelID].jsonData[id] };\r\n    }\r\n\r\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        const chunks = await this.getSpatialTreeChunks(modelID);\r\n        const projectsIDs = await this.getAllItemsOfType(modelID, IFCPROJECT, false);\r\n        const projectID = projectsIDs[0];\r\n        const project = JSONPropertyManager.newIfcProject(projectID);\r\n        await this.getSpatialNode(modelID, project, chunks, includeProperties);\r\n        return { ...project };\r\n    }\r\n\r\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        const data = this.state.models[modelID].jsonData;\r\n        const typeName = IfcTypesMap[type];\r\n        if (!typeName) {\r\n            throw new Error(`Type not found: ${type}`);\r\n        }\r\n        return this.filterItemsByType(data, typeName, verbose);\r\n    }\r\n\r\n    override async getProperty(modelID: number, elementID: number, recursive = false, propName: pName) {\r\n        const resultIDs = await this.getAllRelatedItemsOfType(modelID, elementID, propName);\r\n        const result = this.getItemsByID(modelID, resultIDs);\r\n        if (recursive) {\r\n            result.forEach(result => this.getReferencesRecursively(modelID, result));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected override getNodeType(modelID: number, id: number) {\r\n        return this.state.models[modelID].jsonData[id].type;\r\n    }\r\n\r\n    protected override async getChunks(modelID: number, chunks: any, propNames: pName) {\r\n        const relation = await this.getAllItemsOfType(modelID, propNames.name, true);\r\n        relation.forEach(rel => {\r\n            this.saveChunk(chunks, propNames, rel);\r\n        });\r\n    }\r\n\r\n    private filterItemsByType(data: { [id: number]: JSONObject }, typeName: string, verbose: boolean) {\r\n        const result: any[] = [];\r\n        Object.keys(data).forEach(key => {\r\n            const numKey = parseInt(key);\r\n            if (data[numKey].type.toUpperCase() === typeName) {\r\n                result.push(verbose ? { ...data[numKey] } : numKey);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private async getAllRelatedItemsOfType(modelID: number, id: number, propNames: pName) {\r\n        const lines = await this.getAllItemsOfType(modelID, propNames.name, true);\r\n        const IDs: number[] = [];\r\n        lines.forEach(line => {\r\n            const isRelated = JSONPropertyManager.isRelated(id, line, propNames);\r\n            if (isRelated) this.getRelated(line, propNames, IDs);\r\n        });\r\n        return IDs;\r\n    }\r\n\r\n    private getItemsByID(modelID: number, ids: number[]) {\r\n        const data = this.state.models[modelID].jsonData;\r\n        const result: any[] = [];\r\n        ids.forEach(id => result.push({ ...data[id] }));\r\n        return result;\r\n    }\r\n\r\n    private getReferencesRecursively(modelID: number, jsonObject: any) {\r\n        if (jsonObject == undefined) return;\r\n        const keys = Object.keys(jsonObject);\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const key = keys[i];\r\n            this.getJSONItem(modelID, jsonObject, key);\r\n        }\r\n    }\r\n\r\n    private getJSONItem(modelID: number, jsonObject: any, key: string) {\r\n        if (Array.isArray(jsonObject[key])) {\r\n            return this.getMultipleJSONItems(modelID, jsonObject, key);\r\n        }\r\n        if (jsonObject[key] && jsonObject[key].type === 5) {\r\n            jsonObject[key] = this.getItemsByID(modelID, [jsonObject[key].value])[0];\r\n            this.getReferencesRecursively(modelID, jsonObject[key]);\r\n        }\r\n    }\r\n\r\n    private getMultipleJSONItems(modelID: number, jsonObject: any, key: string) {\r\n        jsonObject[key] = jsonObject[key].map((item: any) => {\r\n            if (item.type === 5) {\r\n                item = this.getItemsByID(modelID, [item.value])[0];\r\n                this.getReferencesRecursively(modelID, item);\r\n            }\r\n            return item;\r\n        });\r\n    }\r\n}","import {\r\n    IdAttrName\r\n} from '../../BaseDefinitions';\r\nimport { IfcState } from '../../BaseDefinitions';\r\nimport { BufferGeometry } from 'three';\r\nimport { WebIfcPropertyManager } from './WebIfcPropertyManager';\r\nimport { JSONPropertyManager } from './JSONPropertyManager';\r\nimport { PropertyManagerAPI, PropertyAPI } from './BaseDefinitions';\r\n\r\n/**\r\n * Contains the logic to get the properties of the items within an IFC model.\r\n */\r\nexport class PropertyManager implements PropertyManagerAPI {\r\n    private readonly webIfcProps: WebIfcPropertyManager;\r\n    private readonly jsonProps: JSONPropertyManager;\r\n    private currentProps: PropertyAPI;\r\n\r\n    constructor(private state: IfcState) {\r\n        this.webIfcProps = new WebIfcPropertyManager(state);\r\n        this.jsonProps = new JSONPropertyManager(state);\r\n        this.currentProps = this.webIfcProps;\r\n    }\r\n\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        if (!geometry.index) throw new Error('Geometry does not have index information.');\r\n        const geoIndex = geometry.index.array;\r\n        return geometry.attributes[IdAttrName].getX(geoIndex[3 * faceIndex]);\r\n    }\r\n\r\n    async getItemProperties(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getItemProperties(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getAllItemsOfType(modelID, type, verbose);\r\n    }\r\n\r\n    async getPropertySets(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getPropertySets(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getTypeProperties(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getTypeProperties(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getMaterialsProperties(modelID: number, elementID: number, recursive = false) {\r\n        this.updateCurrentProps();\r\n        return this.currentProps.getMaterialsProperties(modelID, elementID, recursive);\r\n    }\r\n\r\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        this.updateCurrentProps();\r\n        if (!this.state.useJSON && includeProperties) {\r\n            console.warn('Including properties in getSpatialStructure with the JSON workflow disabled can lead to poor performance.');\r\n        }\r\n        return await this.currentProps.getSpatialStructure(modelID, includeProperties);\r\n    }\r\n\r\n    private updateCurrentProps() {\r\n        this.currentProps = this.state.useJSON ? this.jsonProps : this.webIfcProps;\r\n    }\r\n\r\n}\r\n","import { IfcState } from '../BaseDefinitions';\r\nimport { IfcElements } from './IFCElementsMap'\r\nimport { IFCWorkerHandler } from '../web-workers/IFCWorkerHandler';\r\n\r\n/**\r\n * Contains the logic to manage the type (e. g. IfcWall, IfcWindow, IfcDoor) of\r\n * all the items within an IFC file.\r\n */\r\nexport class TypeManager {\r\n\r\n    constructor(private state: IfcState) {\r\n        this.state = state;\r\n    }\r\n\r\n    async getAllTypes(worker?: IFCWorkerHandler){\r\n\t\tfor (let modelID in this.state.models) {\r\n\t\t\tif (this.state.models.hasOwnProperty(modelID)) {\r\n\t\t\t\tconst types = this.state.models[modelID].types;\r\n\t\t\t\tif (Object.keys(types).length == 0) {\r\n\t\t\t\t\tawait this.getAllTypesOfModel(parseInt(modelID), worker);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    async getAllTypesOfModel(modelID: number, worker?: IFCWorkerHandler) {\r\n        const result = {};\r\n        const elements = Object.keys(IfcElements).map((e) => parseInt(e));\r\n        for(let i = 0; i < elements.length; i++) {\r\n            const element = elements[i];\r\n            const lines = await this.state.api.GetLineIDsWithType(modelID, element);\r\n            const size = lines.size();\r\n            //@ts-ignore\r\n            for (let i = 0; i < size; i++) result[lines.get(i)] = element;\r\n        }\r\n        if(this.state.worker.active && worker) {\r\n            // TODO: When using web workers, store the type information there and request it to the worker\r\n            // Otherwise the type data is stored in 2 different places at the same time\r\n            await worker.workerState.updateModelStateTypes(modelID, result);\r\n        }\r\n        this.state.models[modelID].types = result;\r\n    }\r\n}\r\n","import { BufferGeometry, Mesh } from 'three';\r\n\r\nexport class BvhManager {\r\n    private computeBoundsTree?: any;\r\n    private disposeBoundsTree?: any;\r\n    private acceleratedRaycast?: any;\r\n\r\n    initializeMeshBVH(computeBoundsTree: any, disposeBoundsTree: any, acceleratedRaycast: any) {\r\n        this.computeBoundsTree = computeBoundsTree;\r\n        this.disposeBoundsTree = disposeBoundsTree;\r\n        this.acceleratedRaycast = acceleratedRaycast;\r\n        this.setupThreeMeshBVH();\r\n    }\r\n\r\n    applyThreeMeshBVH(geometry: BufferGeometry) {\r\n        if (this.computeBoundsTree)\r\n            //@ts-ignore\r\n            geometry.computeBoundsTree();\r\n    }\r\n\r\n    private setupThreeMeshBVH() {\r\n        if (!this.computeBoundsTree || !this.disposeBoundsTree || !this.acceleratedRaycast) return;\r\n        //@ts-ignore\r\n        BufferGeometry.prototype.computeBoundsTree = this.computeBoundsTree;\r\n        //@ts-ignore\r\n        BufferGeometry.prototype.disposeBoundsTree = this.disposeBoundsTree;\r\n        Mesh.prototype.raycast = this.acceleratedRaycast;\r\n    }\r\n}","import { IfcState, WebIfcAPI } from '../BaseDefinitions';\r\n\r\nexport interface IfcWorkerAPI {\r\n    post: (data: any) => void;\r\n    initializeAPI: (api: WebIfcAPI) => void;\r\n    state?: IfcState;\r\n    postCallback: (data: any, result: any, serializer?: any) => void;\r\n}\r\n\r\nexport enum WorkerActions {\r\n    // Worker State Actions\r\n    updateStateUseJson = 'updateStateUseJson',\r\n    updateStateWebIfcSettings = 'updateStateWebIfcSettings',\r\n    updateModelStateTypes = 'updateModelStateTypes',\r\n    updateModelStateJsonData = 'updateModelStateJsonData',\r\n    loadJsonDataFromWorker = 'loadJsonDataFromWorker',\r\n    dispose = 'dispose',\r\n\r\n    // WebIFC Actions\r\n    Close = 'Close',\r\n    DisposeWebIfc = 'DisposeWebIfc',\r\n    Init = 'Init',\r\n    OpenModel = 'OpenModel',\r\n    CreateModel = 'CreateModel',\r\n    ExportFileAsIFC = 'ExportFileAsIFC',\r\n    GetGeometry = 'GetGeometry',\r\n    GetLine = 'GetLine',\r\n    GetAndClearErrors = 'GetAndClearErrors',\r\n    WriteLine = 'WriteLine',\r\n    FlattenLine = 'FlattenLine',\r\n    GetRawLineData = 'GetRawLineData',\r\n    WriteRawLineData = 'WriteRawLineData',\r\n    GetLineIDsWithType = 'GetLineIDsWithType',\r\n    GetAllLines = 'GetAllLines',\r\n    SetGeometryTransformation = 'SetGeometryTransformation',\r\n    GetCoordinationMatrix = 'GetCoordinationMatrix',\r\n    GetVertexArray = 'GetVertexArray',\r\n    GetIndexArray = 'GetIndexArray',\r\n    getSubArray = 'getSubArray',\r\n    CloseModel = 'CloseModel',\r\n    StreamAllMeshes = 'StreamAllMeshes',\r\n    StreamAllMeshesWithTypes = 'StreamAllMeshesWithTypes',\r\n    IsModelOpen = 'IsModelOpen',\r\n    LoadAllGeometry = 'LoadAllGeometry',\r\n    GetFlatMesh = 'GetFlatMesh',\r\n    SetWasmPath = 'SetWasmPath',\r\n\r\n    // Parser\r\n    parse = 'parse',\r\n    setupOptionalCategories = 'setupOptionalCategories',\r\n\r\n    // Properties\r\n    getExpressId = 'getExpressId',\r\n    initializeProperties = 'initializeProperties',\r\n    getAllItemsOfType = 'getAllItemsOfType',\r\n    getItemProperties = 'getItemProperties',\r\n    getMaterialsProperties = 'getMaterialsProperties',\r\n    getPropertySets = 'getPropertySets',\r\n    getSpatialStructure = 'getSpatialStructure',\r\n    getTypeProperties = 'getTypeProperties',    \r\n}\r\n\r\nexport enum WorkerAPIs {\r\n    workerState = 'workerState',\r\n    webIfc = 'webIfc',\r\n    properties = 'properties',\r\n    parser = 'parser',\r\n}\r\n\r\nexport interface IfcEventData {\r\n    worker: WorkerAPIs;\r\n    action: WorkerActions;\r\n    args: any;\r\n    id: number;\r\n    result: any;\r\n    onProgress: boolean;\r\n}\r\n\r\nexport interface RootWorker {\r\n    [WorkerAPIs.workerState]: WorkerStateAPI;\r\n    [WorkerAPIs.webIfc]: WebIfcWorkerAPI;\r\n    [WorkerAPIs.properties]: PropertyWorkerAPI;\r\n}\r\n\r\nexport interface BaseWorkerAPI {\r\n    API: WorkerAPIs;\r\n}\r\n\r\nexport type IfcWorkerEventHandler = (data: IfcEventData) => void;\r\n\r\nexport interface WorkerStateAPI extends BaseWorkerAPI {\r\n    [WorkerActions.updateStateUseJson]: IfcWorkerEventHandler;\r\n    [WorkerActions.updateStateWebIfcSettings]: IfcWorkerEventHandler;\r\n    [WorkerActions.updateModelStateTypes]: IfcWorkerEventHandler;\r\n    [WorkerActions.updateModelStateJsonData]: IfcWorkerEventHandler;\r\n    [WorkerActions.loadJsonDataFromWorker]: IfcWorkerEventHandler;\r\n    [WorkerActions.dispose]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface PropertyWorkerAPI extends BaseWorkerAPI {\r\n    [WorkerActions.getAllItemsOfType]: IfcWorkerEventHandler;\r\n    [WorkerActions.getItemProperties]: IfcWorkerEventHandler;\r\n    [WorkerActions.getMaterialsProperties]: IfcWorkerEventHandler;\r\n    [WorkerActions.getPropertySets]: IfcWorkerEventHandler;\r\n    [WorkerActions.getSpatialStructure]: IfcWorkerEventHandler;\r\n    [WorkerActions.getTypeProperties]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface ParserWorkerAPI extends BaseWorkerAPI {\r\n    [WorkerActions.parse]: IfcWorkerEventHandler;\r\n    [WorkerActions.setupOptionalCategories]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface WebIfcWorkerAPI extends BaseWorkerAPI {\r\n    [WorkerActions.Init]: IfcWorkerEventHandler;\r\n    [WorkerActions.Close]: IfcWorkerEventHandler;\r\n    [WorkerActions.DisposeWebIfc]: IfcWorkerEventHandler;\r\n    [WorkerActions.OpenModel]: IfcWorkerEventHandler;\r\n    [WorkerActions.CreateModel]: IfcWorkerEventHandler;\r\n    [WorkerActions.ExportFileAsIFC]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetGeometry]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetLine]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetAndClearErrors]: IfcWorkerEventHandler;\r\n    [WorkerActions.WriteLine]: IfcWorkerEventHandler;\r\n    [WorkerActions.FlattenLine]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetRawLineData]: IfcWorkerEventHandler;\r\n    [WorkerActions.WriteRawLineData]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetLineIDsWithType]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetAllLines]: IfcWorkerEventHandler;\r\n    [WorkerActions.SetGeometryTransformation]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetCoordinationMatrix]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetVertexArray]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetIndexArray]: IfcWorkerEventHandler;\r\n    [WorkerActions.getSubArray]: IfcWorkerEventHandler;\r\n    [WorkerActions.CloseModel]: IfcWorkerEventHandler;\r\n    [WorkerActions.StreamAllMeshes]: IfcWorkerEventHandler;\r\n    [WorkerActions.StreamAllMeshesWithTypes]: IfcWorkerEventHandler;\r\n    [WorkerActions.IsModelOpen]: IfcWorkerEventHandler;\r\n    [WorkerActions.LoadAllGeometry]: IfcWorkerEventHandler;\r\n    [WorkerActions.GetFlatMesh]: IfcWorkerEventHandler;\r\n    [WorkerActions.SetWasmPath]: IfcWorkerEventHandler;\r\n}\r\n\r\nexport interface SerializedVector {\r\n    [key: number]: any;\r\n\r\n    size: number;\r\n}\r\n\r\nexport interface SerializedIfcGeometry {\r\n    GetVertexData: number;\r\n    GetVertexDataSize: number;\r\n    GetIndexData: number;\r\n    GetIndexDataSize: number;\r\n}\r\n\r\nexport interface SerializedFlatMesh {\r\n    geometries: SerializedVector;\r\n    expressID: number;\r\n}\r\n\r\nexport const ErrorStateNotAvailable = 'The state of the worker does not exist';\r\nexport const ErrorRootStateNotAvailable = 'The root worker does not have any state';\r\nexport const ErrorPropertiesNotAvailable = 'Error: Properties not available from web worker';\r\nexport const ErrorParserNotAvailable = 'Error: Parser not available from web worker';\r\nexport const ErrorBadJsonPath = 'Error: Model not available from web worker';\r\nexport const ErrorBadJson = 'Error: The given Json could not be read as a JS object';","import { SerializedVector } from '../BaseDefinitions';\r\nimport { Vector as WebIfcVector } from 'web-ifc';\r\n\r\nexport class Vector<T> implements WebIfcVector<T> {\r\n    private readonly _size: number;\r\n    private _data: { [key: number]: T } = {};\r\n\r\n    constructor(vector: SerializedVector) {\r\n        this._size = vector.size;\r\n        const keys = Object.keys(vector).filter((key) => key.indexOf('size') === -1).map(key => parseInt(key));\r\n        keys.forEach((key) => this._data[key] = vector[key]);\r\n    }\r\n\r\n    size() {\r\n        return this._size;\r\n    }\r\n\r\n    get(index: number) {\r\n        return this._data[index];\r\n    }\r\n}","import { SerializedIfcGeometry } from '../BaseDefinitions';\r\nimport { IfcGeometry as WebIfcIfcGeometry } from 'web-ifc';\r\n\r\nexport class IfcGeometry implements WebIfcIfcGeometry {\r\n    private readonly _GetVertexData: number;\r\n    private readonly _GetVertexDataSize: number;\r\n    private readonly _GetIndexData: number;\r\n    private readonly _GetIndexDataSize: number;\r\n\r\n    constructor(vector: SerializedIfcGeometry) {\r\n        this._GetVertexData = vector.GetVertexData;\r\n        this._GetVertexDataSize = vector.GetVertexDataSize;\r\n        this._GetIndexData = vector.GetIndexData;\r\n        this._GetIndexDataSize = vector.GetIndexDataSize;\r\n    }\r\n\r\n    GetVertexData() {\r\n        return this._GetVertexData;\r\n    }\r\n\r\n    GetVertexDataSize() {\r\n        return this._GetVertexDataSize;\r\n    }\r\n\r\n    GetIndexData() {\r\n        return this._GetIndexData;\r\n    }\r\n\r\n    GetIndexDataSize() {\r\n        return this._GetIndexDataSize;\r\n    }\r\n}","import { SerializedFlatMesh } from '../BaseDefinitions';\r\nimport { FlatMesh as WebIfcFlatMesh, PlacedGeometry } from 'web-ifc';\r\nimport { Vector } from './Vector';\r\nimport { Serializer } from './Serializer';\r\n\r\nexport class FlatMesh implements WebIfcFlatMesh {\r\n    geometries: Vector<PlacedGeometry>;\r\n    expressID: number;\r\n\r\n    constructor(serializer: Serializer, flatMesh: SerializedFlatMesh) {\r\n        this.expressID = flatMesh.expressID;\r\n        this.geometries = serializer.reconstructVector(flatMesh.geometries);\r\n    }\r\n}","import { SerializedVector } from '../BaseDefinitions';\r\nimport { FlatMesh as WebIfcFlatMesh, Vector as WebIfcVector } from 'web-ifc';\r\nimport { Serializer } from './Serializer';\r\n\r\nexport class FlatMeshVector implements WebIfcVector<WebIfcFlatMesh> {\r\n    private readonly _size: number;\r\n    private _data: { [key: number]: WebIfcFlatMesh } = {};\r\n\r\n    constructor(serializer: Serializer, vector: SerializedVector) {\r\n        this._size = vector.size;\r\n        const keys = Object.keys(vector).filter((key) => key.indexOf('size') === -1).map(key => parseInt(key));\r\n        keys.forEach(key => this._data[key] = serializer.reconstructFlatMesh(vector[key]));\r\n    }\r\n\r\n    size() {\r\n        return this._size;\r\n    }\r\n\r\n    get(index: number) {\r\n        return this._data[index];\r\n    }\r\n}","import {Color, DoubleSide, MeshLambertMaterial} from 'three';\r\n\r\nexport class SerializedMaterial {\r\n    color: number[];\r\n    opacity: number;\r\n    transparent: boolean;\r\n\r\n    constructor(material: MeshLambertMaterial) {\r\n        this.color = [material.color.r, material.color.g, material.color.b];\r\n        this.opacity = material.opacity;\r\n        this.transparent = material.transparent;\r\n    }\r\n}\r\n\r\nexport class MaterialReconstructor {\r\n    static new(material: SerializedMaterial) {\r\n        return new MeshLambertMaterial({\r\n            color: new Color(material.color[0], material.color[1], material.color[2]),\r\n            opacity: material.opacity,\r\n            transparent: material.transparent,\r\n            side: DoubleSide\r\n        })\r\n    }\r\n}","import { BufferAttribute, BufferGeometry } from 'three';\r\nimport { IFCModel } from '../../components/IFCModel';\r\n\r\nexport class SerializedGeometry {\r\n    position: ArrayLike<number>;\r\n    normal: ArrayLike<number>;\r\n    expressID: ArrayLike<number>;\r\n    index: ArrayLike<number>;\r\n    groups: { start: number, count: number, materialIndex?: number }[];\r\n\r\n    constructor(geometry: BufferGeometry) {\r\n        this.position = geometry.attributes.position?.array || [];\r\n        this.normal = geometry.attributes.normal?.array || [];\r\n        this.expressID = geometry.attributes.expressID?.array || [];\r\n        this.index = geometry.index?.array || [];\r\n        this.groups = geometry.groups;\r\n    }\r\n}\r\n\r\nexport class GeometryReconstructor {\r\n    static new(serialized: SerializedGeometry) {\r\n        const geom = new BufferGeometry();\r\n        GeometryReconstructor.set(geom, 'expressID', new Uint32Array(serialized.expressID), 1);\r\n        GeometryReconstructor.set(geom, 'position', new Float32Array(serialized.position), 3);\r\n        GeometryReconstructor.set(geom, 'normal', new Float32Array(serialized.normal), 3);\r\n        geom.setIndex(Array.from(serialized.index));\r\n        geom.groups = serialized.groups;\r\n        return geom;\r\n    }\r\n\r\n    private static set(geom: BufferGeometry, name: string, data: ArrayLike<number>, size: number) {\r\n        if(data.length > 0) {\r\n            geom.setAttribute(name, new BufferAttribute(data, size));\r\n        }\r\n    }\r\n}","import { IFCModel } from '../../components/IFCModel';\r\nimport { Material, MeshLambertMaterial } from 'three';\r\nimport { MaterialReconstructor, SerializedMaterial } from './Material';\r\nimport { GeometryReconstructor, SerializedGeometry } from './Geometry';\r\n\r\nexport class SerializedMesh {\r\n\r\n    modelID: number;\r\n    geometry: SerializedGeometry;\r\n    materials: SerializedMaterial [] = [];\r\n\r\n    constructor(model: IFCModel) {\r\n        this.modelID = model.modelID;\r\n        this.geometry = new SerializedGeometry(model.geometry);\r\n        if (Array.isArray(model.material)) {\r\n            model.material.forEach(mat => {\r\n                this.materials.push(new SerializedMaterial(mat as MeshLambertMaterial));\r\n            });\r\n        } else {\r\n            this.materials.push(new SerializedMaterial(model.material as MeshLambertMaterial));\r\n        }\r\n    }\r\n}\r\n\r\nexport class MeshReconstructor {\r\n\r\n    static new(serialized: SerializedMesh) {\r\n        const model = new IFCModel();\r\n        model.modelID = serialized.modelID;\r\n        model.geometry = GeometryReconstructor.new(serialized.geometry);\r\n        MeshReconstructor.getMaterials(serialized, model);\r\n        return model;\r\n    }\r\n\r\n    private static getMaterials(serialized: SerializedMesh, model: IFCModel) {\r\n        model.material = [];\r\n        const mats = model.material as Material[];\r\n        serialized.materials.forEach(mat => {\r\n            mats.push(MaterialReconstructor.new(mat));\r\n        });\r\n    }\r\n}","import { Vector as WebIfcVector, IfcGeometry as WebIfcIfcGeometry, FlatMesh as WebIfcFlatMesh } from 'web-ifc';\r\nimport { SerializedFlatMesh, SerializedIfcGeometry, SerializedVector } from '../BaseDefinitions';\r\nimport { Vector } from './Vector';\r\nimport { IfcGeometry } from './IfcGeometry';\r\nimport { FlatMesh } from './FlatMesh';\r\nimport { FlatMeshVector } from './FlatMeshVector';\r\nimport { IFCModel } from '../../components/IFCModel';\r\nimport { MeshReconstructor, SerializedMesh } from './Mesh';\r\n\r\nexport class Serializer {\r\n\r\n    serializeVector<T>(vector: WebIfcVector<T>) {\r\n        const size = vector.size();\r\n        const serialized: SerializedVector = { size };\r\n        for (let i = 0; i < size; i++) {\r\n            serialized[i] = vector.get(i);\r\n        }\r\n        return serialized;\r\n    }\r\n\r\n    reconstructVector(vector: SerializedVector): Vector<any> {\r\n        return new Vector(vector);\r\n    }\r\n\r\n    serializeIfcGeometry(geometry: WebIfcIfcGeometry) {\r\n        const GetVertexData = geometry.GetVertexData();\r\n        const GetVertexDataSize = geometry.GetVertexDataSize();\r\n        const GetIndexData = geometry.GetIndexData();\r\n        const GetIndexDataSize = geometry.GetIndexDataSize();\r\n        return {\r\n            GetVertexData,\r\n            GetVertexDataSize,\r\n            GetIndexData,\r\n            GetIndexDataSize\r\n        } as SerializedIfcGeometry;\r\n    }\r\n\r\n    reconstructIfcGeometry(geometry: SerializedIfcGeometry) {\r\n        return new IfcGeometry(geometry);\r\n    }\r\n\r\n    serializeFlatMesh(flatMesh: WebIfcFlatMesh) {\r\n        return {\r\n            expressID: flatMesh.expressID,\r\n            geometries: this.serializeVector(flatMesh.geometries)\r\n        } as SerializedFlatMesh;\r\n    }\r\n\r\n    reconstructFlatMesh(flatMesh: SerializedFlatMesh) {\r\n        return new FlatMesh(this, flatMesh);\r\n    }\r\n\r\n    serializeFlatMeshVector(vector: WebIfcVector<WebIfcFlatMesh>) {\r\n        const size = vector.size();\r\n        const serialized: SerializedVector = { size };\r\n        for (let i = 0; i < size; i++) {\r\n            const flatMesh = vector.get(i);\r\n            serialized[i] = this.serializeFlatMesh(flatMesh);\r\n        }\r\n        return serialized;\r\n    }\r\n\r\n    reconstructFlatMeshVector(vector: SerializedVector): WebIfcVector<WebIfcFlatMesh> {\r\n        return new FlatMeshVector(this, vector);\r\n    }\r\n\r\n    serializeIfcModel(model: IFCModel) {\r\n        return new SerializedMesh(model);\r\n    }\r\n\r\n    reconstructIfcModel(model: SerializedMesh) {\r\n        return MeshReconstructor.new(model);\r\n    }\r\n}","import { PropertyAPI, PropertyManagerAPI } from '../../components/properties/BaseDefinitions';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\r\nimport { BufferGeometry } from 'three';\r\nimport { IdAttrName } from '../../BaseDefinitions';\r\n\r\nexport class PropertyHandler implements PropertyManagerAPI {\r\n\r\n    API = WorkerAPIs.properties;\r\n\r\n    constructor(private handler: IFCWorkerHandler) {\r\n    }\r\n\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        if (!geometry.index) throw new Error('Geometry does not have index information.');\r\n        const geoIndex = geometry.index.array;\r\n        return geometry.attributes[IdAttrName].getX(geoIndex[3 * faceIndex]);\r\n    }\r\n\r\n    getAllItemsOfType(modelID: number, type: number, verbose: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getAllItemsOfType, { modelID, type, verbose });\r\n    }\r\n\r\n    getItemProperties(modelID: number, elementID: number, recursive: boolean): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.getItemProperties, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getMaterialsProperties(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getMaterialsProperties, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getPropertySets(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getPropertySets, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getTypeProperties(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\r\n        return this.handler.request(this.API, WorkerActions.getTypeProperties, { modelID, elementID, recursive });\r\n    }\r\n\r\n    getSpatialStructure(modelID: number, includeProperties?: boolean): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.getSpatialStructure, { modelID, includeProperties });\r\n    }\r\n}","import { WebIfcAPI } from '../../BaseDefinitions';\r\nimport {\r\n    SerializedFlatMesh,\r\n    SerializedIfcGeometry,\r\n    SerializedVector,\r\n    WorkerActions,\r\n    WorkerAPIs\r\n} from '../BaseDefinitions';\r\nimport { FlatMesh, IfcGeometry, LoaderError, LoaderSettings, RawLineData, Vector } from 'web-ifc';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { Serializer } from '../serializer/Serializer';\r\n\r\nexport class WebIfcHandler implements WebIfcAPI {\r\n\r\n    wasmModule: any;\r\n    API = WorkerAPIs.webIfc;\r\n\r\n    constructor(private handler: IFCWorkerHandler, private serializer: Serializer) {\r\n    }\r\n\r\n    async Init(): Promise<void> {\r\n        this.wasmModule = true;\r\n        return this.handler.request(this.API, WorkerActions.Init);\r\n    }\r\n\r\n    async OpenModel(data: string | Uint8Array, settings?: LoaderSettings): Promise<number> {\r\n        return this.handler.request(this.API, WorkerActions.OpenModel, { data, settings });\r\n    }\r\n\r\n    async CreateModel(settings?: LoaderSettings): Promise<number> {\r\n        return this.handler.request(this.API, WorkerActions.CreateModel, { settings });\r\n    }\r\n\r\n    async ExportFileAsIFC(modelID: number): Promise<Uint8Array> {\r\n        return this.handler.request(this.API, WorkerActions.ExportFileAsIFC, { modelID });\r\n    }\r\n\r\n    async GetGeometry(modelID: number, geometryExpressID: number): Promise<IfcGeometry> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (geom: SerializedIfcGeometry) => {\r\n            return this.serializer.reconstructIfcGeometry(geom);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetGeometry, { modelID, geometryExpressID });\r\n    }\r\n\r\n    async GetLine(modelID: number, expressID: number, flatten?: boolean): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.GetLine, { modelID, expressID, flatten });\r\n    }\r\n\r\n    async GetAndClearErrors(modelID: number): Promise<Vector<LoaderError>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetAndClearErrors, { modelID });\r\n    }\r\n\r\n    async WriteLine(modelID: number, lineObject: any): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.WriteLine, { modelID, lineObject });\r\n    }\r\n\r\n    async FlattenLine(modelID: number, line: any): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.FlattenLine, { modelID, line });\r\n    }\r\n\r\n    async GetRawLineData(modelID: number, expressID: number): Promise<RawLineData> {\r\n        return this.handler.request(this.API, WorkerActions.GetRawLineData, { modelID, expressID });\r\n    }\r\n\r\n    async WriteRawLineData(modelID: number, data: RawLineData): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.WriteRawLineData, { modelID, data });\r\n    }\r\n\r\n    async GetLineIDsWithType(modelID: number, type: number): Promise<Vector<number>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetLineIDsWithType, { modelID, type });\r\n    }\r\n\r\n    async GetAllLines(modelID: number): Promise<Vector<number>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetAllLines, { modelID });\r\n    }\r\n\r\n    async SetGeometryTransformation(modelID: number, transformationMatrix: number[]): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.SetGeometryTransformation, {\r\n            modelID,\r\n            transformationMatrix\r\n        });\r\n    }\r\n\r\n    async GetCoordinationMatrix(modelID: number): Promise<number[]> {\r\n        return this.handler.request(this.API, WorkerActions.GetCoordinationMatrix, { modelID });\r\n    }\r\n\r\n    async GetVertexArray(ptr: number, size: number): Promise<Float32Array> {\r\n        return this.handler.request(this.API, WorkerActions.GetVertexArray, { ptr, size });\r\n    }\r\n\r\n    async GetIndexArray(ptr: number, size: number): Promise<Uint32Array> {\r\n        return this.handler.request(this.API, WorkerActions.GetIndexArray, { ptr, size });\r\n    }\r\n\r\n    async getSubArray(heap: any, startPtr: any, sizeBytes: any): Promise<any> {\r\n        return this.handler.request(this.API, WorkerActions.getSubArray, { heap, startPtr, sizeBytes });\r\n    }\r\n\r\n    async CloseModel(modelID: number): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.CloseModel, { modelID });\r\n    }\r\n\r\n    async StreamAllMeshes(modelID: number, meshCallback: (mesh: FlatMesh) => void): Promise<void> {\r\n        this.handler.callbackHandlers[this.handler.requestID] = {\r\n            action: meshCallback,\r\n            serializer: this.serializer.reconstructFlatMesh\r\n        };\r\n        return this.handler.request(this.API, WorkerActions.StreamAllMeshes, { modelID });\r\n    }\r\n\r\n    async StreamAllMeshesWithTypes(modelID: number, types: number[], meshCallback: (mesh: FlatMesh) => void): Promise<void> {\r\n        this.handler.callbackHandlers[this.handler.requestID] = {\r\n            action: meshCallback,\r\n            serializer: this.serializer.reconstructFlatMesh\r\n        };\r\n        return this.handler.request(this.API, WorkerActions.StreamAllMeshesWithTypes, { modelID, types });\r\n    }\r\n\r\n    async IsModelOpen(modelID: number): Promise<boolean> {\r\n        return this.handler.request(this.API, WorkerActions.IsModelOpen, { modelID });\r\n    }\r\n\r\n    async LoadAllGeometry(modelID: number): Promise<Vector<FlatMesh>> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\r\n            return this.serializer.reconstructFlatMeshVector(vector);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.LoadAllGeometry, { modelID });\r\n    }\r\n\r\n    async GetFlatMesh(modelID: number, expressID: number): Promise<FlatMesh> {\r\n        this.handler.serializeHandlers[this.handler.requestID] = (flatMesh: SerializedFlatMesh) => {\r\n            return this.serializer.reconstructFlatMesh(flatMesh);\r\n        }\r\n        return this.handler.request(this.API, WorkerActions.GetFlatMesh, { modelID, expressID });\r\n    }\r\n\r\n    async SetWasmPath(path: string): Promise<void> {\r\n        return this.handler.request(this.API, WorkerActions.SetWasmPath, { path });\r\n    }\r\n}","import { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { IfcState } from '../../BaseDefinitions';\r\n\r\nexport class WorkerStateHandler {\r\n    API = WorkerAPIs.workerState;\r\n    state: IfcState;\r\n\r\n    constructor(private handler: IFCWorkerHandler) {\r\n        this.state = this.handler.state;\r\n    }\r\n\r\n    async updateStateUseJson() {\r\n        const useJson = this.state.useJSON;\r\n        return this.handler.request(this.API, WorkerActions.updateStateUseJson, { useJson });\r\n    }\r\n\r\n    async updateStateWebIfcSettings() {\r\n        const webIfcSettings = this.state.webIfcSettings;\r\n        return this.handler.request(this.API, WorkerActions.updateStateWebIfcSettings, { webIfcSettings });\r\n    }\r\n\r\n    async updateModelStateTypes (modelID: number, types: any) {\r\n        return this.handler.request(this.API, WorkerActions.updateModelStateTypes, { modelID, types });\r\n    }\r\n\r\n    async updateModelStateJsonData(modelID: number, jsonData: any) {\r\n        return this.handler.request(this.API, WorkerActions.updateModelStateJsonData, { modelID, jsonData });\r\n    }\r\n\r\n    async loadJsonDataFromWorker(modelID: number, path: string) {\r\n        return this.handler.request(this.API, WorkerActions.loadJsonDataFromWorker, { modelID, path });\r\n    }\r\n}","export enum DBOperation {\r\n    transferIfcModel,\r\n    transferIndividualItems\r\n}\r\n\r\nexport class IndexedDatabase {\r\n    async save(item: any, id: DBOperation) {\r\n        const open = IndexedDatabase.openOrCreateDB(id);\r\n        this.createSchema(open, id)\r\n        return new Promise<any>((resolve, reject) => {\r\n            open.onsuccess = () => this.saveItem(item, open, id, resolve);\r\n        });\r\n    }\r\n\r\n    async load(id: number) {\r\n        const open = IndexedDatabase.openOrCreateDB(id);\r\n        return new Promise<any>((resolve, reject) => {\r\n            open.onsuccess = () => this.loadItem(open, id, resolve);\r\n        })\r\n    }\r\n\r\n    private createSchema(open: IDBOpenDBRequest, id: DBOperation) {\r\n        open.onupgradeneeded = function () {\r\n            const db = open.result;\r\n            db.createObjectStore(id.toString(), {keyPath: \"id\"});\r\n        };\r\n    }\r\n\r\n    private saveItem(item: any, open: IDBOpenDBRequest, id: DBOperation, resolve: (value: any) => void ) {\r\n        const {db, tx, store} = IndexedDatabase.getDBItems(open, id);\r\n        item.id = id;\r\n        store.put(item);\r\n        tx.oncomplete = () => IndexedDatabase.closeDB(db, tx, resolve);\r\n    }\r\n\r\n    private loadItem(open: IDBOpenDBRequest, id: DBOperation, resolve: (value: any) => void ) {\r\n        const {db, tx, store} = IndexedDatabase.getDBItems(open, id);\r\n        const item = store.get(id);\r\n        const callback = () => {\r\n            delete item.result.id;\r\n            resolve(item.result)\r\n        };\r\n        tx.oncomplete = () => IndexedDatabase.closeDB(db, tx, callback);\r\n    }\r\n\r\n    private static getDBItems(open: IDBOpenDBRequest, id: DBOperation) {\r\n        const db = open.result;\r\n        const tx = db.transaction(id.toString(), \"readwrite\");\r\n        const store = tx.objectStore(id.toString());\r\n        return {db, tx, store};\r\n    }\r\n\r\n    private static openOrCreateDB(id: DBOperation) {\r\n        return indexedDB.open(id.toString(), 1);\r\n    }\r\n\r\n    private static closeDB(db: IDBDatabase, tx: IDBTransaction, resolve: (value: any) => void) {\r\n        db.close();\r\n        resolve(\"success\");\r\n    }\r\n}","import {OptionalCategories, ParserAPI, ParserProgress } from '../../components/IFCParser';\r\nimport { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\r\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\r\nimport { IFCModel } from '../../components/IFCModel';\r\nimport { Serializer } from '../serializer/Serializer';\r\nimport { ParserResult } from '../workers/ParserWorker';\r\nimport { BvhManager } from '../../components/BvhManager';\r\nimport { DBOperation, IndexedDatabase } from '../../indexedDB/IndexedDatabase';\r\nimport { IFCOPENINGELEMENT, IFCSPACE } from \"web-ifc\";\r\n\r\nexport class ParserHandler implements ParserAPI {\r\n\r\n    optionalCategories: OptionalCategories = {\r\n        [IFCSPACE]: true,\r\n        [IFCOPENINGELEMENT]: false\r\n    };\r\n\r\n    API = WorkerAPIs.parser;\r\n\r\n    constructor(private handler: IFCWorkerHandler,\r\n                private serializer: Serializer,\r\n                private BVH: BvhManager,\r\n                private IDB: IndexedDatabase) {\r\n    }\r\n\r\n    async setupOptionalCategories(config: OptionalCategories) {\r\n        this.optionalCategories = config;\r\n        return this.handler.request(this.API, WorkerActions.setupOptionalCategories, {config});\r\n    }\r\n\r\n    async parse(buffer: any, coordinationMatrix?: number[]): Promise<IFCModel> {\r\n        this.handler.onprogressHandlers[this.handler.requestID] = (progress: ParserProgress) => {\r\n            if (this.handler.state.onProgress) this.handler.state.onProgress(progress);\r\n        };\r\n        this.handler.serializeHandlers[this.handler.requestID] = async (result: ParserResult) => {\r\n            this.updateState(result.modelID);\r\n            // await this.getItems(result.modelID);\r\n            return this.getModel();\r\n        };\r\n        return this.handler.request(this.API, WorkerActions.parse, {buffer, coordinationMatrix});\r\n    }\r\n\r\n    getAndClearErrors(_modelId: number): void {\r\n    }\r\n\r\n    private updateState(modelID: number) {\r\n        this.handler.state.models[modelID] = {\r\n            modelID: modelID,\r\n            mesh: {} as any,\r\n            types: {},\r\n            jsonData: {}\r\n        };\r\n    }\r\n\r\n    // private async getItems(modelID: number) {\r\n    //     const items = await this.IDB.load(DBOperation.transferIndividualItems);\r\n    //     this.handler.state.models[modelID].items = this.serializer.reconstructGeometriesByMaterials(items);\r\n    // }\r\n\r\n    private async getModel() {\r\n        const serializedModel = await this.IDB.load(DBOperation.transferIfcModel);\r\n        const model = this.serializer.reconstructIfcModel(serializedModel);\r\n        this.BVH.applyThreeMeshBVH(model.geometry);\r\n        this.handler.state.models[model.modelID].mesh = model;\r\n        return model;\r\n    }\r\n}","import { IfcEventData, WorkerActions, WorkerAPIs } from './BaseDefinitions';\r\nimport { Serializer } from './serializer/Serializer';\r\nimport { PropertyHandler } from './handlers/PropertyHandler';\r\nimport { WebIfcHandler } from './handlers/WebIfcHandler';\r\nimport { IfcState } from '../BaseDefinitions';\r\nimport { WorkerStateHandler } from './handlers/WorkerStateHandler';\r\nimport { ParserHandler } from './handlers/ParserHandler';\r\nimport { BvhManager } from '../components/BvhManager';\r\nimport { IndexedDatabase } from '../indexedDB/IndexedDatabase';\r\n\r\nexport class IFCWorkerHandler {\r\n\r\n    requestID = 0;\r\n    rejectHandlers: any = {};\r\n    resolveHandlers: any = {};\r\n    serializeHandlers: any = {};\r\n    callbackHandlers: { [id: number]: { action: any, serializer: any } } = {};\r\n    onprogressHandlers: any = {};\r\n\r\n    readonly IDB: IndexedDatabase;\r\n    readonly workerState: WorkerStateHandler;\r\n    readonly webIfc: WebIfcHandler;\r\n    readonly properties: PropertyHandler;\r\n    readonly parser: ParserHandler;\r\n\r\n    private ifcWorker: Worker;\r\n    private readonly serializer = new Serializer();\r\n    private readonly workerPath: string;\r\n\r\n    constructor(public state: IfcState, private BVH: BvhManager) {\r\n        this.IDB = new IndexedDatabase();\r\n        this.workerPath = this.state.worker.path;\r\n        this.ifcWorker = new Worker(this.workerPath);\r\n        this.ifcWorker.onmessage = (data: any) => this.handleResponse(data);\r\n        this.properties = new PropertyHandler(this);\r\n        this.parser = new ParserHandler(this, this.serializer, this.BVH, this.IDB);\r\n        this.webIfc = new WebIfcHandler(this, this.serializer);\r\n        this.workerState = new WorkerStateHandler(this);\r\n    }\r\n\r\n    request(worker: WorkerAPIs, action: WorkerActions, args?: any) {\r\n        const data: IfcEventData = {worker, action, args, id: this.requestID, result: undefined, onProgress: false};\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this.resolveHandlers[this.requestID] = resolve;\r\n            this.rejectHandlers[this.requestID] = reject;\r\n            this.requestID++;\r\n            this.ifcWorker.postMessage(data);\r\n        });\r\n    }\r\n\r\n    async terminate() {\r\n        await this.request(WorkerAPIs.workerState, WorkerActions.dispose);\r\n        await this.request(WorkerAPIs.webIfc, WorkerActions.DisposeWebIfc);\r\n        this.ifcWorker.terminate();\r\n    }\r\n\r\n    async Close(): Promise<void> {\r\n        await this.request(WorkerAPIs.webIfc, WorkerActions.Close);\r\n    }\r\n\r\n    private handleResponse(event: MessageEvent) {\r\n        const data = event.data as IfcEventData;\r\n        if (data.onProgress) {\r\n            this.resolveOnProgress(data);\r\n            return;\r\n        }\r\n        this.callHandlers(data);\r\n        delete this.resolveHandlers[data.id];\r\n        delete this.rejectHandlers[data.id];\r\n        delete this.onprogressHandlers[data.id];\r\n    }\r\n\r\n    private callHandlers(data: IfcEventData) {\r\n        try {\r\n            this.resolveSerializations(data);\r\n            this.resolveCallbacks(data);\r\n            this.resolveHandlers[data.id](data.result);\r\n        } catch (error) {\r\n            this.rejectHandlers[data.id](error);\r\n        }\r\n    }\r\n\r\n    private resolveOnProgress(data: IfcEventData) {\r\n        if (this.onprogressHandlers[data.id]) {\r\n            data.result = this.onprogressHandlers[data.id](data.result);\r\n        }\r\n    }\r\n\r\n    private resolveSerializations(data: IfcEventData) {\r\n        if (this.serializeHandlers[data.id]) {\r\n            data.result = this.serializeHandlers[data.id](data.result);\r\n            delete this.serializeHandlers[data.id];\r\n        }\r\n    }\r\n\r\n    private resolveCallbacks(data: IfcEventData) {\r\n        if (this.callbackHandlers[data.id]) {\r\n            let callbackParameter = data.result;\r\n            if (this.callbackHandlers[data.id].serializer) {\r\n                callbackParameter = this.callbackHandlers[data.id].serializer(data.result);\r\n            }\r\n            this.callbackHandlers[data.id].action(callbackParameter);\r\n        }\r\n    }\r\n}","import { IfcState } from '../BaseDefinitions';\r\nimport { Material } from 'three';\r\n\r\nexport class MemoryCleaner {\r\n    constructor(private state: IfcState) {\r\n    }\r\n\r\n    async dispose() {\r\n\r\n        Object.keys(this.state.models).forEach(modelID => {\r\n            const model = this.state.models[parseInt(modelID, 10)];\r\n            model.mesh.removeFromParent();\r\n            const geom = model.mesh.geometry as any;\r\n            if (geom.disposeBoundsTree) geom.disposeBoundsTree();\r\n            geom.dispose();\r\n            if (!Array.isArray(model.mesh.material)) model.mesh.material.dispose();\r\n            else model.mesh.material.forEach(mat => mat.dispose());\r\n            (model.mesh as any) = null;\r\n            (model.types as any) = null;\r\n            (model.jsonData as any) = null;\r\n        });\r\n\r\n        (this.state.api as any) = null;\r\n        (this.state.models as any) = null;\r\n    }\r\n}","import { IfcState } from '../BaseDefinitions';\r\nimport { IfcTypesMap } from './IfcTypesMap'\r\n\r\nexport class IFCUtils {\r\n    \r\n    map: {[key: string]: number} = {};\r\n\r\n    constructor(public state: IfcState) {}\r\n\r\n    getMapping(){\r\n        this.map = this.reverseElementMapping(IfcTypesMap)\r\n    }\r\n\r\n    releaseMapping(){\r\n        this.map = {}\r\n    }\r\n\r\n    reverseElementMapping(obj: {}) {\r\n        let reverseElement = {};\r\n        Object.keys(obj).forEach(key => {\r\n            reverseElement[obj[key as any as keyof typeof obj]] = key as any as keyof typeof obj;\r\n        })\r\n        return reverseElement;\r\n    }\r\n\r\n    isA(entity: any, entity_class: string){\r\n        var test = false;\r\n        if (entity_class){\r\n            if (IfcTypesMap[entity.type] === entity_class.toUpperCase()){\r\n                test = true;\r\n            }\r\n            return test\r\n        }\r\n        else {\r\n            return IfcTypesMap[entity.type]\r\n        }\r\n    }\r\n\r\n    async byId (modelID: number, id: number) {\r\n        return this.state.api.GetLine(modelID, id);\r\n    }\r\n\r\n    async idsByType(modelID: number, entity_class: string){\r\n        this.getMapping()\r\n        let entities_ids = await this.state.api.GetLineIDsWithType(modelID, Number(this.map[entity_class.toUpperCase()]) );\r\n        this.releaseMapping()\r\n        return entities_ids\r\n    }\r\n\r\n    async byType(modelID:number, entity_class:string){\r\n        let entities_ids = await this.idsByType(modelID, entity_class) \r\n        if (entities_ids !== null){\r\n            this.getMapping()\r\n            let items: number[] = [];\r\n            for (let i = 0; i < entities_ids.size(); i++){\r\n                let entity = await this.byId(modelID, entities_ids.get(i))\r\n                items.push(entity);\r\n            } \r\n            this.releaseMapping()\r\n            return items;\r\n        }\r\n    }\r\n}\r\n","import { IfcState } from '../../BaseDefinitions';\r\nimport { IFCUtils } from '../IFCUtils'\r\n\r\nexport class Data {\r\n    isLoaded = false;\r\n    workPlans: {[key: number]: any} = {}\r\n    workSchedules: {[key: number]: any} = {}\r\n    workCalendars: {[key: number]: any} = {}\r\n    workTimes: {[key: number]: any} = {}\r\n    recurrencePatterns: {[key: number]: any} = {}\r\n    timePeriods: {[key: number]: any} = {}\r\n    tasks: {[key: number]: any} = {}\r\n    taskTimes: {[key: number]: any} = {}\r\n    lagTimes: {[key: number]: any} = {}\r\n    sequences: {[key: number]: any} = {}\r\n    utils: any;\r\n\r\n    constructor(public state: IfcState) {\r\n        this.utils = new IFCUtils(this.state);\r\n\r\n    }\r\n\r\n    //TO DO: Refactor to retrieve top-level task from a workschedule entity, and then load tasks.\r\n    // Currently only tasks are retrieved. \r\n    async load(modelID: number){\r\n        await this.loadTasks(modelID)\r\n        await this.loadWorkSchedules(modelID)\r\n        await this.loadWorkCalendars(modelID)\r\n        await this.loadWorkTimes(modelID)\r\n        await this.loadTimePeriods(modelID)\r\n        this.isLoaded = true\r\n\r\n    }\r\n\r\n\r\n    async loadWorkSchedules(modelID: number){\r\n        let workSchedules = await this.utils.byType(modelID, \"IfcWorkSchedule\")\r\n        for (let i = 0; i < workSchedules.length; i++){\r\n            let workSchedule = workSchedules[i]\r\n            this.workSchedules[workSchedule.expressID] = {   \r\n                \"Id\": workSchedule.expressID,\r\n                \"Name\": workSchedule.Name.value,\r\n                \"Description\": ((workSchedule.Description) ? workSchedule.Description.value : \"\"),\r\n                \"Creators\": [], \r\n                \"CreationDate\": ((workSchedule.CreationDate) ? workSchedule.CreationDate.value : \"\"),\r\n                \"StartTime\": ((workSchedule.StartTime) ? workSchedule.StartTime.value : \"\"),\r\n                \"FinishTime\": ((workSchedule.FinishTime) ? workSchedule.FinishTime.value : \"\"),\r\n                \"TotalFloat\": ((workSchedule.TotalFloat) ? workSchedule.TotalFloat.value : \"\"),\r\n                \"RelatedObjects\": [],\r\n            }\r\n        }\r\n        this.loadWorkScheduleRelatedObjects(modelID)\r\n    }\r\n\r\n\r\n    async loadWorkScheduleRelatedObjects(modelID: number){\r\n        let relsControls = await this.utils.byType(modelID, \"IfcRelAssignsToControl\");\r\n        for (let i = 0; i < relsControls.length; i++){\r\n            let relControls = relsControls[i];\r\n            let relatingControl = await this.utils.byId(modelID, relControls.RelatingControl.value);\r\n            let relatedObjects = relControls.RelatedObjects;\r\n            if (this.utils.isA(relatingControl, \"IfcWorkSchedule\")) {\r\n                for (var objectIndex = 0; objectIndex < relatedObjects.length; objectIndex++) {\r\n                    this.workSchedules[relatingControl.expressID][\"RelatedObjects\"].push(relatedObjects[objectIndex].value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadTasks(modelID: number){\r\n        let tasks = await this.utils.byType(modelID, \"IfcTask\")\r\n        for (let i = 0; i < tasks.length; i++){\r\n            let task = tasks[i]\r\n            this.tasks[task.expressID] = {   \r\n                \"Id\": task.expressID,\r\n                \"Name\": ((task.Name) ? task.Name.value : \"\"),\r\n                \"PredefinedType\": ((task.PredefinedType) ? task.PredefinedType.value : \"\"),\r\n                \"TaskTime\": ((task.TaskTime) ? await this.utils.byId(modelID, task.TaskTime.value) : \"\"), \r\n                \"Identification\": ((task.Identification) ? task.Identification.value : \"\"),\r\n                \"IsMilestone\": ((task.IsMilestone) ? task.IsMilestone.value : \"\"),\r\n                \"IsPredecessorTo\": [],\r\n                \"IsSucessorFrom\": [],\r\n                \"Inputs\": [],\r\n                \"Resources\": [],\r\n                \"Outputs\": [],\r\n                \"Controls\": [],\r\n                \"Nests\": [],\r\n                \"IsNestedBy\": [],\r\n                \"OperatesOn\":[],\r\n                \"HasAssignmentsWorkCalendars\": [],\r\n            }\r\n        }\r\n        await this.loadTaskSequence(modelID)\r\n        await this.loadTaskOutputs(modelID)\r\n        await this.loadTaskNesting(modelID)\r\n        await this.loadTaskOperations(modelID)\r\n        await this.loadAssignementsWorkCalendar(modelID)\r\n    }\r\n\r\n    async loadTaskSequence(modelID: number){\r\n        let relsSequence = await this.utils.idsByType(modelID, \"IfcRelSequence\")\r\n        for (let i = 0; i < relsSequence.size(); i++){\r\n            let relSequenceId = relsSequence.get(i)\r\n            if(relSequenceId !==0){\r\n                let relSequence = await this.utils.byId(modelID, relSequenceId)\r\n                let related_process = relSequence.RelatedProcess.value;\r\n                let relatingProcess = relSequence.RelatingProcess.value;\r\n                this.tasks[relatingProcess][\"IsPredecessorTo\"].push(relSequence.expressID)\r\n                this.tasks[related_process][\"IsSucessorFrom\"].push(relSequence.expressID)\r\n            }\r\n        }\r\n            \r\n    }\r\n\r\n    async loadTaskOutputs(modelID: number){\r\n        let rels_assigns_to_product = await this.utils.byType(modelID, \"IfcRelAssignsToProduct\");\r\n        for (let i = 0; i < rels_assigns_to_product.length; i++){\r\n            let relAssignsToProduct = rels_assigns_to_product[i]\r\n            let relatedObject = await this.utils.byId(modelID, relAssignsToProduct.RelatedObjects[0].value); \r\n            if (this.utils.isA(relatedObject, \"IfcTask\")) {\r\n                let relatingProduct = await this.utils.byId(modelID, relAssignsToProduct.RelatingProduct.value);\r\n                this.tasks[relatedObject.expressID][\"Outputs\"].push(relatingProduct.expressID);\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadTaskNesting(modelID: number){\r\n        let rels_nests = await this.utils.byType(modelID, \"IfcRelNests\");\r\n        for (let i = 0; i < rels_nests.length; i++){\r\n            let relNests = rels_nests[i];\r\n            let relating_object = await this.utils.byId(modelID, relNests.RelatingObject.value);\r\n            if (this.utils.isA(relating_object, \"IfcTask\")) {\r\n                let relatedObjects = relNests.RelatedObjects;\r\n                for (var object_index = 0; object_index < relatedObjects.length; object_index++) {\r\n                    this.tasks[relating_object.expressID][\"IsNestedBy\"].push(relatedObjects[object_index].value);\r\n                    this.tasks[relatedObjects[object_index].value][\"Nests\"].push(relating_object.expressID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadTaskOperations(modelID: number){\r\n        let relsAssignsToProcess = await this.utils.byType(modelID, \"IfcRelAssignsToProcess\");\r\n        for (let i = 0; i < relsAssignsToProcess.length; i++){\r\n            let relAssignToProcess = relsAssignsToProcess[i];\r\n            let relatingProcess = await this.utils.byId(modelID, relAssignToProcess.RelatingProcess.value);\r\n            if (this.utils.isA(relatingProcess, \"IfcTask\")) {\r\n                let relatedObjects = relAssignToProcess.RelatedObjects;\r\n                for (var object_index = 0; object_index < relatedObjects.length; object_index++) {\r\n                    this.tasks[relatingProcess.expressID][\"OperatesOn\"].push(relatedObjects[object_index].value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadAssignementsWorkCalendar(modelID: number){\r\n        let relsAssignsToControl = await this.utils.byType(modelID, \"IfcRelAssignsToControl\");\r\n        for (let i = 0; i < relsAssignsToControl.length; i++){\r\n            let relAssignsToControl = relsAssignsToControl[i];\r\n            let relatingControl = await this.utils.byId(modelID, relAssignsToControl.RelatingControl.value);\r\n            if (this.utils.isA(relatingControl, \"IfcWorkCalendar\")) {\r\n                let relatedObjects = relAssignsToControl.RelatedObjects;\r\n                for (var object_index = 0; object_index < relatedObjects.length; object_index++) {\r\n                    this.tasks[relatedObjects[object_index].value][\"HasAssignmentsWorkCalendars\"].push(relatingControl.expressID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadWorkCalendars(modelID: number){\r\n        let workCalendars = await this.utils.byType(modelID, \"IfcWorkCalendar\")\r\n        for (let i = 0; i < workCalendars.length; i++){\r\n            let workCalendar = workCalendars[i]\r\n            let workCalenderData = {   \r\n                \"Id\": workCalendar.expressID,\r\n                \"Name\": ((workCalendar.Name) ? workCalendar.Name.value : \"\"),\r\n                \"Description\": ((workCalendar.Description) ? workCalendar.Description.value : \"\"),\r\n                \"WorkingTimes\": ((workCalendar.WorkingTimes) ? workCalendar.WorkingTimes : []),\r\n                \"ExceptionTimes\": ((workCalendar.ExceptionTimes) ? workCalendar.ExceptionTimes : []),\r\n            }\r\n            this.workCalendars[workCalendar.expressID] = workCalenderData\r\n        }\r\n        // this.loadworkCalendarRelatedObjects(modelID)\r\n    }    \r\n\r\n    async loadWorkTimes(modelID: number){\r\n        let workTimes = await this.utils.byType(modelID, \"IfcWorkTime\")\r\n        for (let i = 0; i < workTimes.length; i++){\r\n            let workTime = workTimes[i]\r\n            let workTimeData = {   \r\n                \"Name\": ((workTime.Name) ? workTime.Name.value : \"\"),\r\n                \"RecurrencePattern\": ((workTime.RecurrencePattern) ? await this.utils.byId(modelID, workTime.RecurrencePattern.value) : \"\"), \r\n                \"Start\": ((workTime.Start) ? new Date(workTime.Start.value) : \"\"),\r\n                \"Finish\": ((workTime.Finish) ? new Date(workTime.Finish.value) : \"\"),\r\n            }\r\n            this.workTimes[workTime.expressID] = workTimeData\r\n        }\r\n    }\r\n\r\n    async loadTimePeriods(modelID: number){\r\n        let timePeriods = await this.utils.byType(modelID, \"IfcTimePeriod\")\r\n        for (let i = 0; i < timePeriods.length; i++){\r\n            let timePeriod = timePeriods[i]\r\n            let workTimeData = {   \r\n                \"StartTime\": ((timePeriod.StartTime) ? new Date(timePeriod.StartTime.value) : \"\"),\r\n                \"EndTime\": ((timePeriod.EndTime) ? new Date(timePeriod.EndTime.value) : \"\"),\r\n            }\r\n            this.timePeriods[timePeriod.expressID] = workTimeData\r\n        }\r\n    }    \r\n}\r\n","import * as WebIFC from 'web-ifc';\r\nimport { IFCParser, ParserAPI, ParserProgress } from './IFCParser';\r\nimport { SubsetManager } from './subsets/SubsetManager';\r\nimport { PropertyManager } from './properties/PropertyManager';\r\nimport { IfcElements } from './IFCElementsMap';\r\nimport { TypeManager } from './TypeManager';\r\nimport { SubsetConfig, IfcState, JSONObject } from '../BaseDefinitions';\r\nimport {BufferGeometry, Material, Matrix4, Scene} from 'three';\r\nimport { IFCModel } from './IFCModel';\r\nimport { BvhManager } from './BvhManager';\r\nimport { LoaderSettings } from 'web-ifc';\r\nimport { IFCWorkerHandler } from '../web-workers/IFCWorkerHandler';\r\nimport { PropertyManagerAPI } from './properties/BaseDefinitions';\r\nimport { MemoryCleaner } from './MemoryCleaner';\r\nimport { IFCUtils } from './IFCUtils';\r\nimport { Data } from './sequence/Data'\r\nimport { IfcTypesMap } from './IfcTypesMap';\r\n\r\n/**\r\n * Contains all the logic to work with the loaded IFC files (select, edit, etc).\r\n */\r\nexport class IFCManager {\r\n    state: IfcState = {\r\n        models: [],\r\n        api: new WebIFC.IfcAPI(),\r\n        useJSON: false,\r\n        worker: { active: false, path: '' }\r\n    };\r\n\r\n    BVH = new BvhManager();\r\n    typesMap: {[key: number]: string} = IfcTypesMap;\r\n    parser: ParserAPI = new IFCParser(this.state, this.BVH);\r\n    subsets = new SubsetManager(this.state, this.BVH);\r\n    utils = new IFCUtils(this.state)\r\n    sequenceData = new Data(this.state)\r\n    private properties: PropertyManagerAPI = new PropertyManager(this.state);\r\n    private types = new TypeManager(this.state);\r\n    private cleaner = new MemoryCleaner(this.state);\r\n    private worker?: IFCWorkerHandler;\r\n\r\n    /**\r\n     * Returns the underlying web-ifc API.\r\n     */\r\n    get ifcAPI() {\r\n        return this.state.api;\r\n    }\r\n\r\n    // SETUP - all the logic regarding the configuration of web-ifc-three\r\n\r\n    async parse(buffer: ArrayBuffer) {\r\n        const model = await this.parser.parse(buffer, this.state.coordinationMatrix?.toArray()) as IFCModel;\r\n        model.setIFCManager(this);\r\n        // this.state.useJSON ? await this.disposeMemory() : await this.types.getAllTypes(this.worker);\r\n        await this.types.getAllTypes(this.worker);\r\n        return model;\r\n    }\r\n\r\n    /**\r\n     * Sets the relative path of web-ifc.wasm file in the project.\r\n     * Beware: you **must** serve this file in your page; this means\r\n     * that you have to copy this files from *node_modules/web-ifc*\r\n     * to your deployment directory.\r\n     *\r\n     * If you don't use this methods,\r\n     * IFC.js assumes that you are serving it in the root directory.\r\n     *\r\n     * Example if web-ifc.wasm is in dist/wasmDir:\r\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\r\n     *\r\n     * @path Relative path to web-ifc.wasm.\r\n     */\r\n    async setWasmPath(path: string) {\r\n        this.state.api.SetWasmPath(path);\r\n        this.state.wasmPath = path;\r\n    }\r\n\r\n    /**\r\n     * Makes object picking a lot faster\r\n     * Courtesy of gkjohnson's [work](https://github.com/gkjohnson/three-mesh-bvh).\r\n     * Import these objects from his library and pass them as arguments. IFC.js takes care of the rest!\r\n     */\r\n    setupThreeMeshBVH(computeBoundsTree: any, disposeBoundsTree: any, acceleratedRaycast: any) {\r\n        this.BVH.initializeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast);\r\n    }\r\n\r\n    /**\r\n     * Sets a callback function that is called every 10% of IFC loaded.\r\n     * @onProgress callback function\r\n     */\r\n    setOnProgress(onProgress: (event: ParserProgress) => void) {\r\n        this.state.onProgress = onProgress;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a coordination matrix to be applied when loading geometry.\r\n     * @matrix THREE.Matrix4\r\n     */\r\n    setupCoordinationMatrix(matrix: Matrix4){\r\n        this.state.coordinationMatrix = matrix;\r\n    }\r\n\r\n    /**\r\n     * Clears the coordination matrix that is applied when loading geometry.\r\n     */\r\n    clearCoordinationMatrix(){\r\n        delete this.state.coordinationMatrix;\r\n    }\r\n\r\n    /**\r\n     * Applies a configuration for [web-ifc](https://ifcjs.github.io/info/docs/Guide/web-ifc/Introduction).\r\n     */\r\n    async applyWebIfcConfig(settings: LoaderSettings) {\r\n        this.state.webIfcSettings = settings;\r\n        if (this.state.worker.active && this.worker) {\r\n            await this.worker.workerState.updateStateWebIfcSettings();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uses web workers, making the loader non-blocking.\r\n     * @active Wether to use web workers or not.\r\n     * @path Relative path to the web worker file. Necessary if active=true.\r\n     */\r\n    async useWebWorkers(active: boolean, path?: string) {\r\n        if (this.state.worker.active === active) return;\r\n        // @ts-ignore\r\n        this.state.api = null;\r\n        if (active) {\r\n            if (!path) throw new Error('You must provide a path to the web worker.');\r\n            this.state.worker.active = active;\r\n            this.state.worker.path = path;\r\n            await this.initializeWorkers();\r\n            const wasm = this.state.wasmPath;\r\n            if(wasm) await this.setWasmPath(wasm);\r\n        } else {\r\n            this.state.api = new WebIFC.IfcAPI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\r\n     * Enables the JSON mode (which consumes way less memory) and eliminates the WASM data.\r\n     * Only use this in the following scenarios:\r\n     * - If you don't need to access the properties of the IFC\r\n     * - If you will provide the properties as JSON.\r\n     * @useJSON: Wether to use the JSON mode or not.\r\n     */\r\n    async useJSONData(useJSON = true) {\r\n        this.state.useJSON = useJSON;\r\n        if (useJSON) {\r\n            await this.worker?.workerState.updateStateUseJson();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\r\n     * Adds the properties of a model as JSON data. If you are using web workers, use\r\n     * `loadJsonDataFromWorker()` instead to avoid overheads.\r\n     * @modelID ID of the IFC model.\r\n     * @data: data as an object where the keys are the expressIDs and the values the properties.\r\n     */\r\n    async addModelJSONData(modelID: number, data: { [id: number]: JSONObject }) {\r\n        const model = this.state.models[modelID];\r\n        if (!model) throw new Error('The specified model for the JSON data does not exist');\r\n        if (this.state.worker.active) {\r\n            await this.worker?.workerState.updateModelStateJsonData(modelID, data);\r\n        } else {\r\n            model.jsonData = data;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\r\n     * Loads the data of an IFC model from a JSON file directly from a web worker. If you are not using\r\n     * web workers, use `addModelJSONData()` instead.\r\n     * @modelID ID of the IFC model.\r\n     * @path: the path to the JSON file **relative to the web worker file**.\r\n     */\r\n    async loadJsonDataFromWorker(modelID: number, path: string) {\r\n        if (this.state.worker.active) {\r\n            await this.worker?.workerState.loadJsonDataFromWorker(modelID, path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the specified model and deletes it from the [scene](https://threejs.org/docs/#api/en/scenes/Scene).\r\n     * @modelID ID of the IFC model.\r\n     * @scene Scene where the model is (if it's located in a scene).\r\n     */\r\n    close(modelID: number, scene?: Scene) {\r\n        this.state.api.CloseModel(modelID);\r\n        if (scene) scene.remove(this.state.models[modelID].mesh);\r\n        delete this.state.models[modelID];\r\n    }\r\n\r\n    /**\r\n     * Gets the **Express ID** to which the given face belongs.\r\n     * This ID uniquely identifies this entity within this IFC file.\r\n     * @geometry The geometry IFC model.\r\n     * @faceIndex The index of the face of a geometry.You can easily get this index using the [Raycaster](https://threejs.org/docs/#api/en/core/Raycaster).\r\n     */\r\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\r\n        return this.properties.getExpressId(geometry, faceIndex);\r\n    }\r\n\r\n    /**\r\n     * Returns all items of the specified type. You can import\r\n     * the types from *web-ifc*.\r\n     *\r\n     * Example to get all the standard walls of a project:\r\n     * ```js\r\n     * import { IFCWALLSTANDARDCASE } from 'web-ifc';\r\n     * const walls = ifcLoader.getAllItemsOfType(IFCWALLSTANDARDCASE);\r\n     * ```\r\n     * @modelID ID of the IFC model.\r\n     * @type type of IFC items to get.\r\n     * @verbose If false (default), this only gets IDs. If true, this also gets the native properties of all the fetched items.\r\n     */\r\n    getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\r\n        return this.properties.getAllItemsOfType(modelID, type, verbose);\r\n    }\r\n\r\n    /**\r\n     * Gets the native properties of the given element.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive Wether you want to get the information of the referenced elements recursively.\r\n     */\r\n    getItemProperties(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getItemProperties(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the [property sets](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifckernel/lexical/ifcpropertyset.htm)\r\n     * assigned to the given element.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getPropertySets(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getPropertySets(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the properties of the type assigned to the element.\r\n     * For example, if applied to a wall (IfcWall), this would get back the information\r\n     * contained in the IfcWallType assigned to it, if any.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getTypeProperties(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getTypeProperties(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the materials assigned to the given element.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\r\n     */\r\n    getMaterialsProperties(modelID: number, id: number, recursive = false) {\r\n        return this.properties.getMaterialsProperties(modelID, id, recursive);\r\n    }\r\n\r\n    /**\r\n     * Gets the ifc type of the specified item.\r\n     * @modelID ID of the IFC model.\r\n     * @id Express ID of the element.\r\n     */\r\n    getIfcType(modelID: number, id: number) {\r\n        const typeID = this.state.models[modelID].types[id];\r\n        return IfcElements[typeID];\r\n    }\r\n\r\n    /**\r\n     * Gets the spatial structure of the project. The\r\n     * [spatial structure](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifcproductextension/lexical/ifcspatialstructureelement.htm)\r\n     * is the hierarchical structure that organizes every IFC project (all physical items\r\n     * are referenced to an element of the spatial structure). It is formed by\r\n     * one IfcProject that contains one or more IfcSites, that contain one or more\r\n     * IfcBuildings, that contain one or more IfcBuildingStoreys, that contain\r\n     * one or more IfcSpaces.\r\n     * @modelID ID of the IFC model.\r\n     */\r\n    getSpatialStructure(modelID: number, includeProperties?: boolean) {\r\n        return this.properties.getSpatialStructure(modelID, includeProperties);\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh of the subset with the specified [material](https://threejs.org/docs/#api/en/materials/Material).\r\n     * If no material is given, this returns the subset with the original materials.\r\n     * @modelID ID of the IFC model.\r\n     * @material Material assigned to the subset (if any).\r\n     * @customId Optional identifier of the subset.\r\n     */\r\n    getSubset(modelID: number, material?: Material, customId?: string) {\r\n        return this.subsets.getSubset(modelID, material, customId);\r\n    }\r\n\r\n    /**\r\n     * Removes the specified subset.\r\n     * @modelID ID of the IFC model.\r\n     * @parent The parent where the subset is (can be any `THREE.Object3D`).\r\n     * @material Material assigned to the subset, if any.\r\n     */\r\n    removeSubset(modelID: number, material?: Material, customID?: string) {\r\n        this.subsets.removeSubset(modelID, material, customID);\r\n    }\r\n\r\n    /**\r\n     * Creates a new geometric subset.\r\n     * @config A configuration object with the following options:\r\n     * - **scene**: `THREE.Object3D` where the model is located.\r\n     * - **modelID**: ID of the model.\r\n     * - **ids**: Express IDs of the items of the model that will conform the subset.\r\n     * - **removePrevious**: wether to remove the previous subset of this model with this material.\r\n     * - **material**: (optional) wether to apply a material to the subset.\r\n     * - **customID**: (optional) custom identifier to distinguish subsets of the same model with the same material.\r\n     */\r\n    createSubset(config: SubsetConfig) {\r\n        return this.subsets.createSubset(config);\r\n    }\r\n\r\n    /**\r\n     * Removes the specified items from the geometry of a subset.\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express IDs of the items of the model that will conform the subset.\r\n     * @material (optional) Material assigned to the subset, if any.\r\n     * @customID (optional) custom identifier to distinguish subsets of the same model with the same material.\r\n     */\r\n    removeFromSubset(modelID: number, ids: number[], customID?: string, material?: Material) {\r\n        return this.subsets.removeFromSubset(modelID, ids, customID, material);\r\n    }\r\n\r\n    /**\r\n     * Removes all the geometry of a subset.\r\n     * @modelID ID of the IFC model.\r\n     * @ids Express IDs of the items of the model that will conform the subset.\r\n     * @material (optional) Material assigned to the subset, if any.\r\n     * @customID (optional) custom identifier to distinguish subsets of the same model with the same material.\r\n     */\r\n    clearSubset(modelID: number, customID?: string, material?: Material) {\r\n        return this.subsets.clearSubset(modelID, customID, material);\r\n    }\r\n\r\n\r\n\r\n\r\n    // UTILITIES - Miscelaneus logic for various purposes\r\n\r\n    /**\r\n    * Returns the IFC class name of an instance if the optional parameter is not provided.\r\n    * If an entit class is provided, it will check if an instance belongs to the class.\r\n    * @modelID ID of the IFC model.\r\n    * @entityClass IFC Class name.\r\n    */\r\n    async isA(entity: any, entity_class: string) {\r\n        return this.utils.isA(entity, entity_class);\r\n    }\r\n\r\n    async getSequenceData(modelID: number) {\r\n        await this.sequenceData.load(modelID);\r\n        return this.sequenceData;\r\n    }\r\n\r\n\r\n    /**\r\n    * Returns the IFC objects filtered by IFC Type and wrapped with the entity_instance class.\r\n    * If an IFC type class has subclasses, all entities of those subclasses are also returned.\r\n    * @modelID ID of the IFC model.\r\n    * @entityClass IFC Class name.\r\n    */\r\n    async byType(modelID: number, entityClass: string) {\r\n        return this.utils.byType(modelID, entityClass);\r\n    }\r\n\r\n    /**\r\n    * Returns the IFC objects filtered by IFC ID.\r\n    * @modelID ID of the IFC model.\r\n    * @id Express ID of the element.\r\n    */\r\n    async byId(modelID: number, id: number) {\r\n        return this.utils.byId(modelID, id);\r\n    }\r\n\r\n    /**\r\n    * Returns the IFC objects filtered by IFC Type and wrapped with the entity_instance class.\r\n    * If an IFC type class has subclasses, all entities of those subclasses are also returned.\r\n    * @modelID ID of the IFC model.\r\n    * @entityClass IFC Class name.\r\n    */\r\n    async idsByType(modelID: number, entityClass: string) {\r\n        return this.utils.idsByType(modelID, entityClass);\r\n    }\r\n\r\n\r\n    // MISC - Miscelaneus logic for various purposes\r\n\r\n    /**\r\n     * Disposes all memory used by the IFCLoader, including WASM memory and the web worker.\r\n     * Use this if you want to destroy the object completely.\r\n     * If you want to load an IFC later, you'll need to create a new instance.\r\n     */\r\n    async dispose() {\r\n        IFCModel.dispose();\r\n        await this.cleaner.dispose();\r\n        this.subsets.dispose();\r\n        if(this.worker && this.state.worker.active) await this.worker.terminate();\r\n        (this.state as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\r\n     * Completely releases the WASM memory, thus drastically decreasing the memory use of the app.\r\n     * Only use this in the following scenarios:\r\n     * - If you don't need to access the properties of the IFC\r\n     * - If you will provide the properties as JSON.\r\n     */\r\n    async disposeMemory() {\r\n        if (this.state.worker.active) {\r\n            await this.worker?.Close();\r\n        } else {\r\n            // @ts-ignore\r\n            this.state.api.Close();\r\n            (this.state.api as any) = null;\r\n            this.state.api = new WebIFC.IfcAPI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For internal use of IFC.js dev team and testers\r\n     */\r\n    getAndClearErrors(modelID: number) {\r\n        return this.parser.getAndClearErrors(modelID);\r\n    }\r\n\r\n    private async initializeWorkers() {\r\n        this.worker = new IFCWorkerHandler(this.state, this.BVH);\r\n        this.state.api = this.worker.webIfc;\r\n        this.properties = this.worker.properties;\r\n        await this.worker.parser.setupOptionalCategories(this.parser.optionalCategories);\r\n        this.parser = this.worker.parser;\r\n        await this.worker.workerState.updateStateUseJson();\r\n        await this.worker.workerState.updateStateWebIfcSettings();\r\n    }\r\n\r\n\r\n}\r\n","import { IFCManager } from './IFC/components/IFCManager';\r\nimport {FileLoader, Loader, LoadingManager, Matrix4} from 'three';\r\nimport { IFCModel } from './IFC/components/IFCModel';\r\n\r\nclass IFCLoader extends Loader {\r\n    ifcManager: IFCManager;\r\n    private onProgress?: (event: ProgressEvent) => void;\r\n\r\n    constructor(manager?: LoadingManager) {\r\n        super(manager);\r\n        this.ifcManager = new IFCManager();\r\n    }\r\n\r\n    load(\r\n        url: any,\r\n        onLoad: (ifc: IFCModel) => void,\r\n        onProgress?: (event: ProgressEvent) => void,\r\n        onError?: (event: ErrorEvent) => void\r\n    ) {\r\n        const scope = this;\r\n\r\n        const loader = new FileLoader(scope.manager);\r\n        this.onProgress = onProgress;\r\n        loader.setPath(scope.path);\r\n        loader.setResponseType('arraybuffer');\r\n        loader.setRequestHeader(scope.requestHeader);\r\n        loader.setWithCredentials(scope.withCredentials);\r\n        loader.load(\r\n            url,\r\n            async function (buffer) {\r\n                try {\r\n                    if (typeof buffer == 'string') {\r\n                        throw new Error('IFC files must be given as a buffer!');\r\n                    }\r\n                    onLoad(await scope.parse(buffer));\r\n                } catch (e: any) {\r\n                    if (onError) {\r\n                        onError(e);\r\n                    } else {\r\n                        console.error(e);\r\n                    }\r\n\r\n                    scope.manager.itemError(url);\r\n                }\r\n            },\r\n            onProgress,\r\n            onError\r\n        );\r\n    }\r\n\r\n    parse(buffer: ArrayBuffer) {\r\n        return this.ifcManager.parse(buffer);\r\n    }\r\n}\r\n\r\nexport { IFCLoader };\r\n"],"names":[],"mappings":"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"}